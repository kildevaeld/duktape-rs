/* automatically generated by rust-bindgen */

pub const DUK_VERSION : u32 = 20300 ; pub const DUK_GIT_COMMIT : & 'static [ u8 ; 41usize ] = b"afca0b933395e35d808ee30254013be5b82def36\0" ; pub const DUK_GIT_DESCRIBE : & 'static [ u8 ; 14usize ] = b"afca0b9-dirty\0" ; pub const DUK_GIT_BRANCH : & 'static [ u8 ; 3usize ] = b"v2\0" ; pub const _SYS_TYPES_H : u32 = 1 ; pub const _FEATURES_H : u32 = 1 ; pub const _DEFAULT_SOURCE : u32 = 1 ; pub const __USE_ISOC11 : u32 = 1 ; pub const __USE_ISOC99 : u32 = 1 ; pub const __USE_ISOC95 : u32 = 1 ; pub const __USE_POSIX_IMPLICITLY : u32 = 1 ; pub const _POSIX_SOURCE : u32 = 1 ; pub const _POSIX_C_SOURCE : u32 = 200809 ; pub const __USE_POSIX : u32 = 1 ; pub const __USE_POSIX2 : u32 = 1 ; pub const __USE_POSIX199309 : u32 = 1 ; pub const __USE_POSIX199506 : u32 = 1 ; pub const __USE_XOPEN2K : u32 = 1 ; pub const __USE_XOPEN2K8 : u32 = 1 ; pub const _ATFILE_SOURCE : u32 = 1 ; pub const __USE_MISC : u32 = 1 ; pub const __USE_ATFILE : u32 = 1 ; pub const __USE_FORTIFY_LEVEL : u32 = 0 ; pub const __GLIBC_USE_DEPRECATED_GETS : u32 = 0 ; pub const __GLIBC_USE_DEPRECATED_SCANF : u32 = 0 ; pub const _STDC_PREDEF_H : u32 = 1 ; pub const __STDC_IEC_559__ : u32 = 1 ; pub const __STDC_IEC_559_COMPLEX__ : u32 = 1 ; pub const __STDC_ISO_10646__ : u32 = 201706 ; pub const __GNU_LIBRARY__ : u32 = 6 ; pub const __GLIBC__ : u32 = 2 ; pub const __GLIBC_MINOR__ : u32 = 29 ; pub const _SYS_CDEFS_H : u32 = 1 ; pub const __glibc_c99_flexarr_available : u32 = 1 ; pub const __WORDSIZE : u32 = 64 ; pub const __WORDSIZE_TIME64_COMPAT32 : u32 = 1 ; pub const __SYSCALL_WORDSIZE : u32 = 64 ; pub const __HAVE_GENERIC_SELECTION : u32 = 1 ; pub const _BITS_TYPES_H : u32 = 1 ; pub const __TIMESIZE : u32 = 64 ; pub const _BITS_TYPESIZES_H : u32 = 1 ; pub const __OFF_T_MATCHES_OFF64_T : u32 = 1 ; pub const __INO_T_MATCHES_INO64_T : u32 = 1 ; pub const __RLIM_T_MATCHES_RLIM64_T : u32 = 1 ; pub const __FD_SETSIZE : u32 = 1024 ; pub const _BITS_TIME64_H : u32 = 1 ; pub const __clock_t_defined : u32 = 1 ; pub const __clockid_t_defined : u32 = 1 ; pub const __time_t_defined : u32 = 1 ; pub const __timer_t_defined : u32 = 1 ; pub const _BITS_STDINT_INTN_H : u32 = 1 ; pub const __BIT_TYPES_DEFINED__ : u32 = 1 ; pub const _ENDIAN_H : u32 = 1 ; pub const __LITTLE_ENDIAN : u32 = 1234 ; pub const __BIG_ENDIAN : u32 = 4321 ; pub const __PDP_ENDIAN : u32 = 3412 ; pub const __BYTE_ORDER : u32 = 1234 ; pub const __FLOAT_WORD_ORDER : u32 = 1234 ; pub const LITTLE_ENDIAN : u32 = 1234 ; pub const BIG_ENDIAN : u32 = 4321 ; pub const PDP_ENDIAN : u32 = 3412 ; pub const BYTE_ORDER : u32 = 1234 ; pub const _BITS_BYTESWAP_H : u32 = 1 ; pub const _BITS_UINTN_IDENTITY_H : u32 = 1 ; pub const _SYS_SELECT_H : u32 = 1 ; pub const __FD_ZERO_STOS : & 'static [ u8 ; 6usize ] = b"stosq\0" ; pub const __sigset_t_defined : u32 = 1 ; pub const __timeval_defined : u32 = 1 ; pub const _STRUCT_TIMESPEC : u32 = 1 ; pub const FD_SETSIZE : u32 = 1024 ; pub const _BITS_PTHREADTYPES_COMMON_H : u32 = 1 ; pub const _THREAD_SHARED_TYPES_H : u32 = 1 ; pub const _BITS_PTHREADTYPES_ARCH_H : u32 = 1 ; pub const __SIZEOF_PTHREAD_MUTEX_T : u32 = 40 ; pub const __SIZEOF_PTHREAD_ATTR_T : u32 = 56 ; pub const __SIZEOF_PTHREAD_RWLOCK_T : u32 = 56 ; pub const __SIZEOF_PTHREAD_BARRIER_T : u32 = 32 ; pub const __SIZEOF_PTHREAD_MUTEXATTR_T : u32 = 4 ; pub const __SIZEOF_PTHREAD_COND_T : u32 = 48 ; pub const __SIZEOF_PTHREAD_CONDATTR_T : u32 = 4 ; pub const __SIZEOF_PTHREAD_RWLOCKATTR_T : u32 = 8 ; pub const __SIZEOF_PTHREAD_BARRIERATTR_T : u32 = 4 ; pub const __PTHREAD_MUTEX_LOCK_ELISION : u32 = 1 ; pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND : u32 = 0 ; pub const __PTHREAD_MUTEX_USE_UNION : u32 = 0 ; pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED : u32 = 1 ; pub const __PTHREAD_MUTEX_HAVE_PREV : u32 = 1 ; pub const __have_pthread_attr_t : u32 = 1 ; pub const _STDINT_H : u32 = 1 ; pub const __GLIBC_USE_LIB_EXT2 : u32 = 0 ; pub const __GLIBC_USE_IEC_60559_BFP_EXT : u32 = 0 ; pub const __GLIBC_USE_IEC_60559_FUNCS_EXT : u32 = 0 ; pub const __GLIBC_USE_IEC_60559_TYPES_EXT : u32 = 0 ; pub const _BITS_WCHAR_H : u32 = 1 ; pub const _BITS_STDINT_UINTN_H : u32 = 1 ; pub const INT8_MIN : i32 = -128 ; pub const INT16_MIN : i32 = -32768 ; pub const INT32_MIN : i32 = -2147483648 ; pub const INT8_MAX : u32 = 127 ; pub const INT16_MAX : u32 = 32767 ; pub const INT32_MAX : u32 = 2147483647 ; pub const UINT8_MAX : u32 = 255 ; pub const UINT16_MAX : u32 = 65535 ; pub const UINT32_MAX : u32 = 4294967295 ; pub const INT_LEAST8_MIN : i32 = -128 ; pub const INT_LEAST16_MIN : i32 = -32768 ; pub const INT_LEAST32_MIN : i32 = -2147483648 ; pub const INT_LEAST8_MAX : u32 = 127 ; pub const INT_LEAST16_MAX : u32 = 32767 ; pub const INT_LEAST32_MAX : u32 = 2147483647 ; pub const UINT_LEAST8_MAX : u32 = 255 ; pub const UINT_LEAST16_MAX : u32 = 65535 ; pub const UINT_LEAST32_MAX : u32 = 4294967295 ; pub const INT_FAST8_MIN : i32 = -128 ; pub const INT_FAST16_MIN : i64 = -9223372036854775808 ; pub const INT_FAST32_MIN : i64 = -9223372036854775808 ; pub const INT_FAST8_MAX : u32 = 127 ; pub const INT_FAST16_MAX : u64 = 9223372036854775807 ; pub const INT_FAST32_MAX : u64 = 9223372036854775807 ; pub const UINT_FAST8_MAX : u32 = 255 ; pub const UINT_FAST16_MAX : i32 = -1 ; pub const UINT_FAST32_MAX : i32 = -1 ; pub const INTPTR_MIN : i64 = -9223372036854775808 ; pub const INTPTR_MAX : u64 = 9223372036854775807 ; pub const UINTPTR_MAX : i32 = -1 ; pub const PTRDIFF_MIN : i64 = -9223372036854775808 ; pub const PTRDIFF_MAX : u64 = 9223372036854775807 ; pub const SIG_ATOMIC_MIN : i32 = -2147483648 ; pub const SIG_ATOMIC_MAX : u32 = 2147483647 ; pub const SIZE_MAX : i32 = -1 ; pub const WINT_MIN : u32 = 0 ; pub const WINT_MAX : u32 = 4294967295 ; pub const _SYS_PARAM_H : u32 = 1 ; pub const _LIBC_LIMITS_H_ : u32 = 1 ; pub const MB_LEN_MAX : u32 = 16 ; pub const _BITS_POSIX1_LIM_H : u32 = 1 ; pub const _POSIX_AIO_LISTIO_MAX : u32 = 2 ; pub const _POSIX_AIO_MAX : u32 = 1 ; pub const _POSIX_ARG_MAX : u32 = 4096 ; pub const _POSIX_CHILD_MAX : u32 = 25 ; pub const _POSIX_DELAYTIMER_MAX : u32 = 32 ; pub const _POSIX_HOST_NAME_MAX : u32 = 255 ; pub const _POSIX_LINK_MAX : u32 = 8 ; pub const _POSIX_LOGIN_NAME_MAX : u32 = 9 ; pub const _POSIX_MAX_CANON : u32 = 255 ; pub const _POSIX_MAX_INPUT : u32 = 255 ; pub const _POSIX_MQ_OPEN_MAX : u32 = 8 ; pub const _POSIX_MQ_PRIO_MAX : u32 = 32 ; pub const _POSIX_NAME_MAX : u32 = 14 ; pub const _POSIX_NGROUPS_MAX : u32 = 8 ; pub const _POSIX_OPEN_MAX : u32 = 20 ; pub const _POSIX_PATH_MAX : u32 = 256 ; pub const _POSIX_PIPE_BUF : u32 = 512 ; pub const _POSIX_RE_DUP_MAX : u32 = 255 ; pub const _POSIX_RTSIG_MAX : u32 = 8 ; pub const _POSIX_SEM_NSEMS_MAX : u32 = 256 ; pub const _POSIX_SEM_VALUE_MAX : u32 = 32767 ; pub const _POSIX_SIGQUEUE_MAX : u32 = 32 ; pub const _POSIX_SSIZE_MAX : u32 = 32767 ; pub const _POSIX_STREAM_MAX : u32 = 8 ; pub const _POSIX_SYMLINK_MAX : u32 = 255 ; pub const _POSIX_SYMLOOP_MAX : u32 = 8 ; pub const _POSIX_TIMER_MAX : u32 = 32 ; pub const _POSIX_TTY_NAME_MAX : u32 = 9 ; pub const _POSIX_TZNAME_MAX : u32 = 6 ; pub const _POSIX_CLOCKRES_MIN : u32 = 20000000 ; pub const NR_OPEN : u32 = 1024 ; pub const NGROUPS_MAX : u32 = 65536 ; pub const ARG_MAX : u32 = 131072 ; pub const LINK_MAX : u32 = 127 ; pub const MAX_CANON : u32 = 255 ; pub const MAX_INPUT : u32 = 255 ; pub const NAME_MAX : u32 = 255 ; pub const PATH_MAX : u32 = 4096 ; pub const PIPE_BUF : u32 = 4096 ; pub const XATTR_NAME_MAX : u32 = 255 ; pub const XATTR_SIZE_MAX : u32 = 65536 ; pub const XATTR_LIST_MAX : u32 = 65536 ; pub const RTSIG_MAX : u32 = 32 ; pub const _POSIX_THREAD_KEYS_MAX : u32 = 128 ; pub const PTHREAD_KEYS_MAX : u32 = 1024 ; pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS : u32 = 4 ; pub const PTHREAD_DESTRUCTOR_ITERATIONS : u32 = 4 ; pub const _POSIX_THREAD_THREADS_MAX : u32 = 64 ; pub const AIO_PRIO_DELTA_MAX : u32 = 20 ; pub const PTHREAD_STACK_MIN : u32 = 16384 ; pub const DELAYTIMER_MAX : u32 = 2147483647 ; pub const TTY_NAME_MAX : u32 = 32 ; pub const LOGIN_NAME_MAX : u32 = 256 ; pub const HOST_NAME_MAX : u32 = 64 ; pub const MQ_PRIO_MAX : u32 = 32768 ; pub const SEM_VALUE_MAX : u32 = 2147483647 ; pub const _BITS_POSIX2_LIM_H : u32 = 1 ; pub const _POSIX2_BC_BASE_MAX : u32 = 99 ; pub const _POSIX2_BC_DIM_MAX : u32 = 2048 ; pub const _POSIX2_BC_SCALE_MAX : u32 = 99 ; pub const _POSIX2_BC_STRING_MAX : u32 = 1000 ; pub const _POSIX2_COLL_WEIGHTS_MAX : u32 = 2 ; pub const _POSIX2_EXPR_NEST_MAX : u32 = 32 ; pub const _POSIX2_LINE_MAX : u32 = 2048 ; pub const _POSIX2_RE_DUP_MAX : u32 = 255 ; pub const _POSIX2_CHARCLASS_NAME_MAX : u32 = 14 ; pub const BC_BASE_MAX : u32 = 99 ; pub const BC_DIM_MAX : u32 = 2048 ; pub const BC_SCALE_MAX : u32 = 99 ; pub const BC_STRING_MAX : u32 = 1000 ; pub const COLL_WEIGHTS_MAX : u32 = 255 ; pub const EXPR_NEST_MAX : u32 = 32 ; pub const LINE_MAX : u32 = 2048 ; pub const CHARCLASS_NAME_MAX : u32 = 2048 ; pub const RE_DUP_MAX : u32 = 32767 ; pub const _BITS_SIGNUM_H : u32 = 1 ; pub const _BITS_SIGNUM_GENERIC_H : u32 = 1 ; pub const SIGINT : u32 = 2 ; pub const SIGILL : u32 = 4 ; pub const SIGABRT : u32 = 6 ; pub const SIGFPE : u32 = 8 ; pub const SIGSEGV : u32 = 11 ; pub const SIGTERM : u32 = 15 ; pub const SIGHUP : u32 = 1 ; pub const SIGQUIT : u32 = 3 ; pub const SIGTRAP : u32 = 5 ; pub const SIGKILL : u32 = 9 ; pub const SIGBUS : u32 = 10 ; pub const SIGSYS : u32 = 12 ; pub const SIGPIPE : u32 = 13 ; pub const SIGALRM : u32 = 14 ; pub const SIGURG : u32 = 16 ; pub const SIGSTOP : u32 = 17 ; pub const SIGTSTP : u32 = 18 ; pub const SIGCONT : u32 = 19 ; pub const SIGCHLD : u32 = 20 ; pub const SIGTTIN : u32 = 21 ; pub const SIGTTOU : u32 = 22 ; pub const SIGPOLL : u32 = 23 ; pub const SIGXCPU : u32 = 24 ; pub const SIGXFSZ : u32 = 25 ; pub const SIGVTALRM : u32 = 26 ; pub const SIGPROF : u32 = 27 ; pub const SIGUSR1 : u32 = 30 ; pub const SIGUSR2 : u32 = 31 ; pub const SIGWINCH : u32 = 28 ; pub const SIGIO : u32 = 23 ; pub const SIGIOT : u32 = 6 ; pub const SIGCLD : u32 = 20 ; pub const __SIGRTMIN : u32 = 32 ; pub const __SIGRTMAX : u32 = 32 ; pub const _NSIG : u32 = 33 ; pub const SIGSTKFLT : u32 = 16 ; pub const SIGPWR : u32 = 30 ; pub const __sig_atomic_t_defined : u32 = 1 ; pub const __siginfo_t_defined : u32 = 1 ; pub const __SI_MAX_SIZE : u32 = 128 ; pub const _BITS_SIGINFO_ARCH_H : u32 = 1 ; pub const __SI_ERRNO_THEN_CODE : u32 = 1 ; pub const __SI_HAVE_SIGSYS : u32 = 1 ; pub const _BITS_SIGINFO_CONSTS_H : u32 = 1 ; pub const __SI_ASYNCIO_AFTER_SIGIO : u32 = 1 ; pub const __sigevent_t_defined : u32 = 1 ; pub const __SIGEV_MAX_SIZE : u32 = 64 ; pub const _BITS_SIGEVENT_CONSTS_H : u32 = 1 ; pub const NSIG : u32 = 33 ; pub const _BITS_SIGACTION_H : u32 = 1 ; pub const SA_NOCLDSTOP : u32 = 1 ; pub const SA_NOCLDWAIT : u32 = 2 ; pub const SA_SIGINFO : u32 = 4 ; pub const SA_ONSTACK : u32 = 134217728 ; pub const SA_RESTART : u32 = 268435456 ; pub const SA_NODEFER : u32 = 1073741824 ; pub const SA_RESETHAND : u32 = 2147483648 ; pub const SA_INTERRUPT : u32 = 536870912 ; pub const SA_NOMASK : u32 = 1073741824 ; pub const SA_ONESHOT : u32 = 2147483648 ; pub const SA_STACK : u32 = 134217728 ; pub const SIG_BLOCK : u32 = 0 ; pub const SIG_UNBLOCK : u32 = 1 ; pub const SIG_SETMASK : u32 = 2 ; pub const _BITS_SIGCONTEXT_H : u32 = 1 ; pub const FP_XSTATE_MAGIC1 : u32 = 1179670611 ; pub const FP_XSTATE_MAGIC2 : u32 = 1179670597 ; pub const __stack_t_defined : u32 = 1 ; pub const _SYS_UCONTEXT_H : u32 = 1 ; pub const __NGREG : u32 = 23 ; pub const NGREG : u32 = 23 ; pub const _BITS_SIGSTACK_H : u32 = 1 ; pub const MINSIGSTKSZ : u32 = 2048 ; pub const SIGSTKSZ : u32 = 8192 ; pub const _BITS_SS_FLAGS_H : u32 = 1 ; pub const __sigstack_defined : u32 = 1 ; pub const _BITS_SIGTHREAD_H : u32 = 1 ; pub const HZ : u32 = 100 ; pub const EXEC_PAGESIZE : u32 = 4096 ; pub const NOGROUP : i32 = -1 ; pub const MAXHOSTNAMELEN : u32 = 64 ; pub const MAXSYMLINKS : u32 = 20 ; pub const NOFILE : u32 = 256 ; pub const NCARGS : u32 = 131072 ; pub const NGROUPS : u32 = 65536 ; pub const CANBSIZ : u32 = 255 ; pub const MAXPATHLEN : u32 = 4096 ; pub const DEV_BSIZE : u32 = 512 ; pub const _SYS_TIME_H : u32 = 1 ; pub const _TIME_H : u32 = 1 ; pub const _BITS_TIME_H : u32 = 1 ; pub const CLOCK_REALTIME : u32 = 0 ; pub const CLOCK_MONOTONIC : u32 = 1 ; pub const CLOCK_PROCESS_CPUTIME_ID : u32 = 2 ; pub const CLOCK_THREAD_CPUTIME_ID : u32 = 3 ; pub const CLOCK_MONOTONIC_RAW : u32 = 4 ; pub const CLOCK_REALTIME_COARSE : u32 = 5 ; pub const CLOCK_MONOTONIC_COARSE : u32 = 6 ; pub const CLOCK_BOOTTIME : u32 = 7 ; pub const CLOCK_REALTIME_ALARM : u32 = 8 ; pub const CLOCK_BOOTTIME_ALARM : u32 = 9 ; pub const CLOCK_TAI : u32 = 11 ; pub const TIMER_ABSTIME : u32 = 1 ; pub const __struct_tm_defined : u32 = 1 ; pub const __itimerspec_defined : u32 = 1 ; pub const _BITS_TYPES_LOCALE_T_H : u32 = 1 ; pub const _BITS_TYPES___LOCALE_T_H : u32 = 1 ; pub const TIME_UTC : u32 = 1 ; pub const DUK_USE_OS_STRING : & 'static [ u8 ; 6usize ] = b"linux\0" ; pub const _STDIO_H : u32 = 1 ; pub const __GNUC_VA_LIST : u32 = 1 ; pub const _____fpos_t_defined : u32 = 1 ; pub const ____mbstate_t_defined : u32 = 1 ; pub const _____fpos64_t_defined : u32 = 1 ; pub const ____FILE_defined : u32 = 1 ; pub const __FILE_defined : u32 = 1 ; pub const __struct_FILE_defined : u32 = 1 ; pub const _IO_EOF_SEEN : u32 = 16 ; pub const _IO_ERR_SEEN : u32 = 32 ; pub const _IO_USER_LOCK : u32 = 32768 ; pub const _IOFBF : u32 = 0 ; pub const _IOLBF : u32 = 1 ; pub const _IONBF : u32 = 2 ; pub const BUFSIZ : u32 = 8192 ; pub const EOF : i32 = -1 ; pub const SEEK_SET : u32 = 0 ; pub const SEEK_CUR : u32 = 1 ; pub const SEEK_END : u32 = 2 ; pub const P_tmpdir : & 'static [ u8 ; 5usize ] = b"/tmp\0" ; pub const _BITS_STDIO_LIM_H : u32 = 1 ; pub const L_tmpnam : u32 = 20 ; pub const TMP_MAX : u32 = 238328 ; pub const FILENAME_MAX : u32 = 4096 ; pub const L_ctermid : u32 = 9 ; pub const FOPEN_MAX : u32 = 16 ; pub const _STDLIB_H : u32 = 1 ; pub const WNOHANG : u32 = 1 ; pub const WUNTRACED : u32 = 2 ; pub const WSTOPPED : u32 = 2 ; pub const WEXITED : u32 = 4 ; pub const WCONTINUED : u32 = 8 ; pub const WNOWAIT : u32 = 16777216 ; pub const __WNOTHREAD : u32 = 536870912 ; pub const __WALL : u32 = 1073741824 ; pub const __WCLONE : u32 = 2147483648 ; pub const __ENUM_IDTYPE_T : u32 = 1 ; pub const __W_CONTINUED : u32 = 65535 ; pub const __WCOREFLAG : u32 = 128 ; pub const __HAVE_FLOAT128 : u32 = 0 ; pub const __HAVE_DISTINCT_FLOAT128 : u32 = 0 ; pub const __HAVE_FLOAT64X : u32 = 1 ; pub const __HAVE_FLOAT64X_LONG_DOUBLE : u32 = 1 ; pub const __HAVE_FLOAT16 : u32 = 0 ; pub const __HAVE_FLOAT32 : u32 = 1 ; pub const __HAVE_FLOAT64 : u32 = 1 ; pub const __HAVE_FLOAT32X : u32 = 1 ; pub const __HAVE_FLOAT128X : u32 = 0 ; pub const __HAVE_DISTINCT_FLOAT16 : u32 = 0 ; pub const __HAVE_DISTINCT_FLOAT32 : u32 = 0 ; pub const __HAVE_DISTINCT_FLOAT64 : u32 = 0 ; pub const __HAVE_DISTINCT_FLOAT32X : u32 = 0 ; pub const __HAVE_DISTINCT_FLOAT64X : u32 = 0 ; pub const __HAVE_DISTINCT_FLOAT128X : u32 = 0 ; pub const __HAVE_FLOATN_NOT_TYPEDEF : u32 = 0 ; pub const __ldiv_t_defined : u32 = 1 ; pub const __lldiv_t_defined : u32 = 1 ; pub const RAND_MAX : u32 = 2147483647 ; pub const EXIT_FAILURE : u32 = 1 ; pub const EXIT_SUCCESS : u32 = 0 ; pub const _ALLOCA_H : u32 = 1 ; pub const _STRING_H : u32 = 1 ; pub const _STRINGS_H : u32 = 1 ; pub const _SETJMP_H : u32 = 1 ; pub const _BITS_SETJMP_H : u32 = 1 ; pub const _MATH_H : u32 = 1 ; pub const _BITS_LIBM_SIMD_DECL_STUBS_H : u32 = 1 ; pub const __FP_LOGB0_IS_MIN : u32 = 1 ; pub const __FP_LOGBNAN_IS_MIN : u32 = 1 ; pub const FP_ILOGB0 : i32 = -2147483648 ; pub const FP_ILOGBNAN : i32 = -2147483648 ; pub const __MATH_DECLARING_DOUBLE : u32 = 1 ; pub const __MATH_DECLARING_FLOATN : u32 = 0 ; pub const __MATH_DECLARE_LDOUBLE : u32 = 1 ; pub const FP_NAN : u32 = 0 ; pub const FP_INFINITE : u32 = 1 ; pub const FP_ZERO : u32 = 2 ; pub const FP_SUBNORMAL : u32 = 3 ; pub const FP_NORMAL : u32 = 4 ; pub const MATH_ERRNO : u32 = 1 ; pub const MATH_ERREXCEPT : u32 = 2 ; pub const math_errhandling : u32 = 3 ; pub const M_E : f64 = 2.718281828459045 ; pub const M_LOG2E : f64 = 1.4426950408889634 ; pub const M_LOG10E : f64 = 0.4342944819032518 ; pub const M_LN2 : f64 = 0.6931471805599453 ; pub const M_LN10 : f64 = 2.302585092994046 ; pub const M_PI : f64 = 3.141592653589793 ; pub const M_PI_2 : f64 = 1.5707963267948966 ; pub const M_PI_4 : f64 = 0.7853981633974483 ; pub const M_1_PI : f64 = 0.3183098861837907 ; pub const M_2_PI : f64 = 0.6366197723675814 ; pub const M_2_SQRTPI : f64 = 1.1283791670955126 ; pub const M_SQRT2 : f64 = 1.4142135623730951 ; pub const M_SQRT1_2 : f64 = 0.7071067811865476 ; pub const DUK_USE_ARCH_STRING : & 'static [ u8 ; 4usize ] = b"x64\0" ; pub const DUK_USE_BYTEORDER : u32 = 1 ; pub const DUK_USE_COMPILER_STRING : & 'static [ u8 ; 6usize ] = b"clang\0" ; pub const _INTTYPES_H : u32 = 1 ; pub const ____gwchar_t_defined : u32 = 1 ; pub const __PRI64_PREFIX : & 'static [ u8 ; 2usize ] = b"l\0" ; pub const __PRIPTR_PREFIX : & 'static [ u8 ; 2usize ] = b"l\0" ; pub const PRId8 : & 'static [ u8 ; 2usize ] = b"d\0" ; pub const PRId16 : & 'static [ u8 ; 2usize ] = b"d\0" ; pub const PRId32 : & 'static [ u8 ; 2usize ] = b"d\0" ; pub const PRId64 : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const PRIdLEAST8 : & 'static [ u8 ; 2usize ] = b"d\0" ; pub const PRIdLEAST16 : & 'static [ u8 ; 2usize ] = b"d\0" ; pub const PRIdLEAST32 : & 'static [ u8 ; 2usize ] = b"d\0" ; pub const PRIdLEAST64 : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const PRIdFAST8 : & 'static [ u8 ; 2usize ] = b"d\0" ; pub const PRIdFAST16 : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const PRIdFAST32 : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const PRIdFAST64 : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const PRIi8 : & 'static [ u8 ; 2usize ] = b"i\0" ; pub const PRIi16 : & 'static [ u8 ; 2usize ] = b"i\0" ; pub const PRIi32 : & 'static [ u8 ; 2usize ] = b"i\0" ; pub const PRIi64 : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const PRIiLEAST8 : & 'static [ u8 ; 2usize ] = b"i\0" ; pub const PRIiLEAST16 : & 'static [ u8 ; 2usize ] = b"i\0" ; pub const PRIiLEAST32 : & 'static [ u8 ; 2usize ] = b"i\0" ; pub const PRIiLEAST64 : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const PRIiFAST8 : & 'static [ u8 ; 2usize ] = b"i\0" ; pub const PRIiFAST16 : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const PRIiFAST32 : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const PRIiFAST64 : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const PRIo8 : & 'static [ u8 ; 2usize ] = b"o\0" ; pub const PRIo16 : & 'static [ u8 ; 2usize ] = b"o\0" ; pub const PRIo32 : & 'static [ u8 ; 2usize ] = b"o\0" ; pub const PRIo64 : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const PRIoLEAST8 : & 'static [ u8 ; 2usize ] = b"o\0" ; pub const PRIoLEAST16 : & 'static [ u8 ; 2usize ] = b"o\0" ; pub const PRIoLEAST32 : & 'static [ u8 ; 2usize ] = b"o\0" ; pub const PRIoLEAST64 : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const PRIoFAST8 : & 'static [ u8 ; 2usize ] = b"o\0" ; pub const PRIoFAST16 : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const PRIoFAST32 : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const PRIoFAST64 : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const PRIu8 : & 'static [ u8 ; 2usize ] = b"u\0" ; pub const PRIu16 : & 'static [ u8 ; 2usize ] = b"u\0" ; pub const PRIu32 : & 'static [ u8 ; 2usize ] = b"u\0" ; pub const PRIu64 : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const PRIuLEAST8 : & 'static [ u8 ; 2usize ] = b"u\0" ; pub const PRIuLEAST16 : & 'static [ u8 ; 2usize ] = b"u\0" ; pub const PRIuLEAST32 : & 'static [ u8 ; 2usize ] = b"u\0" ; pub const PRIuLEAST64 : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const PRIuFAST8 : & 'static [ u8 ; 2usize ] = b"u\0" ; pub const PRIuFAST16 : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const PRIuFAST32 : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const PRIuFAST64 : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const PRIx8 : & 'static [ u8 ; 2usize ] = b"x\0" ; pub const PRIx16 : & 'static [ u8 ; 2usize ] = b"x\0" ; pub const PRIx32 : & 'static [ u8 ; 2usize ] = b"x\0" ; pub const PRIx64 : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const PRIxLEAST8 : & 'static [ u8 ; 2usize ] = b"x\0" ; pub const PRIxLEAST16 : & 'static [ u8 ; 2usize ] = b"x\0" ; pub const PRIxLEAST32 : & 'static [ u8 ; 2usize ] = b"x\0" ; pub const PRIxLEAST64 : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const PRIxFAST8 : & 'static [ u8 ; 2usize ] = b"x\0" ; pub const PRIxFAST16 : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const PRIxFAST32 : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const PRIxFAST64 : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const PRIX8 : & 'static [ u8 ; 2usize ] = b"X\0" ; pub const PRIX16 : & 'static [ u8 ; 2usize ] = b"X\0" ; pub const PRIX32 : & 'static [ u8 ; 2usize ] = b"X\0" ; pub const PRIX64 : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const PRIXLEAST8 : & 'static [ u8 ; 2usize ] = b"X\0" ; pub const PRIXLEAST16 : & 'static [ u8 ; 2usize ] = b"X\0" ; pub const PRIXLEAST32 : & 'static [ u8 ; 2usize ] = b"X\0" ; pub const PRIXLEAST64 : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const PRIXFAST8 : & 'static [ u8 ; 2usize ] = b"X\0" ; pub const PRIXFAST16 : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const PRIXFAST32 : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const PRIXFAST64 : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const PRIdMAX : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const PRIiMAX : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const PRIoMAX : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const PRIuMAX : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const PRIxMAX : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const PRIXMAX : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const PRIdPTR : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const PRIiPTR : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const PRIoPTR : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const PRIuPTR : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const PRIxPTR : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const PRIXPTR : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const SCNd8 : & 'static [ u8 ; 4usize ] = b"hhd\0" ; pub const SCNd16 : & 'static [ u8 ; 3usize ] = b"hd\0" ; pub const SCNd32 : & 'static [ u8 ; 2usize ] = b"d\0" ; pub const SCNd64 : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const SCNdLEAST8 : & 'static [ u8 ; 4usize ] = b"hhd\0" ; pub const SCNdLEAST16 : & 'static [ u8 ; 3usize ] = b"hd\0" ; pub const SCNdLEAST32 : & 'static [ u8 ; 2usize ] = b"d\0" ; pub const SCNdLEAST64 : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const SCNdFAST8 : & 'static [ u8 ; 4usize ] = b"hhd\0" ; pub const SCNdFAST16 : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const SCNdFAST32 : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const SCNdFAST64 : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const SCNi8 : & 'static [ u8 ; 4usize ] = b"hhi\0" ; pub const SCNi16 : & 'static [ u8 ; 3usize ] = b"hi\0" ; pub const SCNi32 : & 'static [ u8 ; 2usize ] = b"i\0" ; pub const SCNi64 : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const SCNiLEAST8 : & 'static [ u8 ; 4usize ] = b"hhi\0" ; pub const SCNiLEAST16 : & 'static [ u8 ; 3usize ] = b"hi\0" ; pub const SCNiLEAST32 : & 'static [ u8 ; 2usize ] = b"i\0" ; pub const SCNiLEAST64 : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const SCNiFAST8 : & 'static [ u8 ; 4usize ] = b"hhi\0" ; pub const SCNiFAST16 : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const SCNiFAST32 : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const SCNiFAST64 : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const SCNu8 : & 'static [ u8 ; 4usize ] = b"hhu\0" ; pub const SCNu16 : & 'static [ u8 ; 3usize ] = b"hu\0" ; pub const SCNu32 : & 'static [ u8 ; 2usize ] = b"u\0" ; pub const SCNu64 : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const SCNuLEAST8 : & 'static [ u8 ; 4usize ] = b"hhu\0" ; pub const SCNuLEAST16 : & 'static [ u8 ; 3usize ] = b"hu\0" ; pub const SCNuLEAST32 : & 'static [ u8 ; 2usize ] = b"u\0" ; pub const SCNuLEAST64 : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const SCNuFAST8 : & 'static [ u8 ; 4usize ] = b"hhu\0" ; pub const SCNuFAST16 : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const SCNuFAST32 : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const SCNuFAST64 : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const SCNo8 : & 'static [ u8 ; 4usize ] = b"hho\0" ; pub const SCNo16 : & 'static [ u8 ; 3usize ] = b"ho\0" ; pub const SCNo32 : & 'static [ u8 ; 2usize ] = b"o\0" ; pub const SCNo64 : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const SCNoLEAST8 : & 'static [ u8 ; 4usize ] = b"hho\0" ; pub const SCNoLEAST16 : & 'static [ u8 ; 3usize ] = b"ho\0" ; pub const SCNoLEAST32 : & 'static [ u8 ; 2usize ] = b"o\0" ; pub const SCNoLEAST64 : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const SCNoFAST8 : & 'static [ u8 ; 4usize ] = b"hho\0" ; pub const SCNoFAST16 : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const SCNoFAST32 : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const SCNoFAST64 : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const SCNx8 : & 'static [ u8 ; 4usize ] = b"hhx\0" ; pub const SCNx16 : & 'static [ u8 ; 3usize ] = b"hx\0" ; pub const SCNx32 : & 'static [ u8 ; 2usize ] = b"x\0" ; pub const SCNx64 : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const SCNxLEAST8 : & 'static [ u8 ; 4usize ] = b"hhx\0" ; pub const SCNxLEAST16 : & 'static [ u8 ; 3usize ] = b"hx\0" ; pub const SCNxLEAST32 : & 'static [ u8 ; 2usize ] = b"x\0" ; pub const SCNxLEAST64 : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const SCNxFAST8 : & 'static [ u8 ; 4usize ] = b"hhx\0" ; pub const SCNxFAST16 : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const SCNxFAST32 : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const SCNxFAST64 : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const SCNdMAX : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const SCNiMAX : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const SCNoMAX : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const SCNuMAX : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const SCNxMAX : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const SCNdPTR : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const SCNiPTR : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const SCNoPTR : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const SCNuPTR : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const SCNxPTR : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const DUK_UINT8_MIN : u32 = 0 ; pub const DUK_UINT8_MAX : u32 = 255 ; pub const DUK_INT8_MIN : i32 = -128 ; pub const DUK_INT8_MAX : u32 = 127 ; pub const DUK_UINT_LEAST8_MIN : u32 = 0 ; pub const DUK_UINT_LEAST8_MAX : u32 = 255 ; pub const DUK_INT_LEAST8_MIN : i32 = -128 ; pub const DUK_INT_LEAST8_MAX : u32 = 127 ; pub const DUK_UINT_FAST8_MIN : u32 = 0 ; pub const DUK_UINT_FAST8_MAX : u32 = 255 ; pub const DUK_INT_FAST8_MIN : i32 = -128 ; pub const DUK_INT_FAST8_MAX : u32 = 127 ; pub const DUK_UINT16_MIN : u32 = 0 ; pub const DUK_UINT16_MAX : u32 = 65535 ; pub const DUK_INT16_MIN : i32 = -32768 ; pub const DUK_INT16_MAX : u32 = 32767 ; pub const DUK_UINT_LEAST16_MIN : u32 = 0 ; pub const DUK_UINT_LEAST16_MAX : u32 = 65535 ; pub const DUK_INT_LEAST16_MIN : i32 = -32768 ; pub const DUK_INT_LEAST16_MAX : u32 = 32767 ; pub const DUK_UINT_FAST16_MIN : u32 = 0 ; pub const DUK_UINT_FAST16_MAX : i32 = -1 ; pub const DUK_INT_FAST16_MIN : i64 = -9223372036854775808 ; pub const DUK_INT_FAST16_MAX : u64 = 9223372036854775807 ; pub const DUK_UINT32_MIN : u32 = 0 ; pub const DUK_UINT32_MAX : u32 = 4294967295 ; pub const DUK_INT32_MIN : i32 = -2147483648 ; pub const DUK_INT32_MAX : u32 = 2147483647 ; pub const DUK_UINT_LEAST32_MIN : u32 = 0 ; pub const DUK_UINT_LEAST32_MAX : u32 = 4294967295 ; pub const DUK_INT_LEAST32_MIN : i32 = -2147483648 ; pub const DUK_INT_LEAST32_MAX : u32 = 2147483647 ; pub const DUK_UINT_FAST32_MIN : u32 = 0 ; pub const DUK_UINT_FAST32_MAX : i32 = -1 ; pub const DUK_INT_FAST32_MIN : i64 = -9223372036854775808 ; pub const DUK_INT_FAST32_MAX : u64 = 9223372036854775807 ; pub const DUK_UINT64_MIN : u32 = 0 ; pub const DUK_UINT_LEAST64_MIN : u32 = 0 ; pub const DUK_UINT_FAST64_MIN : u32 = 0 ; pub const DUK_UINTPTR_MIN : u32 = 0 ; pub const DUK_UINTPTR_MAX : i32 = -1 ; pub const DUK_INTPTR_MIN : i64 = -9223372036854775808 ; pub const DUK_INTPTR_MAX : u64 = 9223372036854775807 ; pub const DUK_UINTMAX_MIN : u32 = 0 ; pub const DUK_SIZE_MIN : u32 = 0 ; pub const DUK_SIZE_MAX : i32 = -1 ; pub const DUK_UINT_MIN : u32 = 0 ; pub const DUK_INT_FAST_MIN : i64 = -9223372036854775808 ; pub const DUK_INT_FAST_MAX : u64 = 9223372036854775807 ; pub const DUK_UINT_FAST_MIN : u32 = 0 ; pub const DUK_UINT_FAST_MAX : i32 = -1 ; pub const DUK_SMALL_UINT_MIN : u32 = 0 ; pub const DUK_SMALL_INT_FAST_MIN : i64 = -9223372036854775808 ; pub const DUK_SMALL_INT_FAST_MAX : u64 = 9223372036854775807 ; pub const DUK_SMALL_UINT_FAST_MIN : u32 = 0 ; pub const DUK_SMALL_UINT_FAST_MAX : i32 = -1 ; pub const DUK_BOOL_MIN : u32 = 0 ; pub const DUK_UIDX_MIN : u32 = 0 ; pub const DUK_UARRIDX_MIN : u32 = 0 ; pub const DUK_UCODEPOINT_MIN : u32 = 0 ; pub const DUK_FP_NAN : u32 = 0 ; pub const DUK_FP_INFINITE : u32 = 1 ; pub const DUK_FP_ZERO : u32 = 2 ; pub const DUK_FP_SUBNORMAL : u32 = 3 ; pub const DUK_FP_NORMAL : u32 = 4 ; pub const DUK_USE_ALIGN_BY : u32 = 8 ; pub const DUK_USE_CALLSTACK_LIMIT : u32 = 10000 ; pub const DUK_USE_COMPILER_RECLIMIT : u32 = 2500 ; pub const DUK_USE_DEBUG_BUFSIZE : u32 = 65536 ; pub const DUK_USE_DEBUG_LEVEL : u32 = 0 ; pub const DUK_USE_ESBC_MAX_BYTES : u32 = 2147418112 ; pub const DUK_USE_ESBC_MAX_LINENUMBER : u32 = 2147418112 ; pub const DUK_USE_FATAL_MAXLEN : u32 = 128 ; pub const DUK_USE_HOBJECT_ARRAY_ABANDON_LIMIT : u32 = 2 ; pub const DUK_USE_HOBJECT_ARRAY_FAST_RESIZE_LIMIT : u32 = 9 ; pub const DUK_USE_HOBJECT_ARRAY_MINGROW_ADD : u32 = 16 ; pub const DUK_USE_HOBJECT_ARRAY_MINGROW_DIVISOR : u32 = 8 ; pub const DUK_USE_HOBJECT_ENTRY_MINGROW_ADD : u32 = 16 ; pub const DUK_USE_HOBJECT_ENTRY_MINGROW_DIVISOR : u32 = 8 ; pub const DUK_USE_HOBJECT_HASH_PROP_LIMIT : u32 = 8 ; pub const DUK_USE_JSON_DEC_RECLIMIT : u32 = 1000 ; pub const DUK_USE_JSON_ENC_RECLIMIT : u32 = 1000 ; pub const DUK_USE_LITCACHE_SIZE : u32 = 256 ; pub const DUK_USE_MARK_AND_SWEEP_RECLIMIT : u32 = 256 ; pub const DUK_USE_NATIVE_CALL_RECLIMIT : u32 = 1000 ; pub const DUK_USE_REGEXP_COMPILER_RECLIMIT : u32 = 10000 ; pub const DUK_USE_REGEXP_EXECUTOR_RECLIMIT : u32 = 10000 ; pub const DUK_USE_ROM_PTRCOMP_FIRST : u32 = 63488 ; pub const DUK_USE_STRHASH_SKIP_SHIFT : u32 = 5 ; pub const DUK_USE_STRTAB_GROW_LIMIT : u32 = 17 ; pub const DUK_USE_STRTAB_MAXSIZE : u32 = 268435456 ; pub const DUK_USE_STRTAB_MINSIZE : u32 = 1024 ; pub const DUK_USE_STRTAB_RESIZE_CHECK_MASK : u32 = 255 ; pub const DUK_USE_STRTAB_SHRINK_LIMIT : u32 = 6 ; pub const DUK_USE_TARGET_INFO : & 'static [ u8 ; 8usize ] = b"unknown\0" ; pub const DUK_USE_TRACEBACK_DEPTH : u32 = 10 ; pub const DUK_USE_VALSTACK_GROW_SHIFT : u32 = 2 ; pub const DUK_USE_VALSTACK_LIMIT : u32 = 1000000 ; pub const DUK_USE_VALSTACK_SHRINK_CHECK_SHIFT : u32 = 2 ; pub const DUK_USE_VALSTACK_SHRINK_SLACK_SHIFT : u32 = 4 ; pub const DUK_DEBUG_PROTOCOL_VERSION : u32 = 2 ; pub const DUK_API_ENTRY_STACK : u32 = 64 ; pub const DUK_TYPE_MIN : u32 = 0 ; pub const DUK_TYPE_NONE : u32 = 0 ; pub const DUK_TYPE_UNDEFINED : u32 = 1 ; pub const DUK_TYPE_NULL : u32 = 2 ; pub const DUK_TYPE_BOOLEAN : u32 = 3 ; pub const DUK_TYPE_NUMBER : u32 = 4 ; pub const DUK_TYPE_STRING : u32 = 5 ; pub const DUK_TYPE_OBJECT : u32 = 6 ; pub const DUK_TYPE_BUFFER : u32 = 7 ; pub const DUK_TYPE_POINTER : u32 = 8 ; pub const DUK_TYPE_LIGHTFUNC : u32 = 9 ; pub const DUK_TYPE_MAX : u32 = 9 ; pub const DUK_TYPE_MASK_NONE : u32 = 1 ; pub const DUK_TYPE_MASK_UNDEFINED : u32 = 2 ; pub const DUK_TYPE_MASK_NULL : u32 = 4 ; pub const DUK_TYPE_MASK_BOOLEAN : u32 = 8 ; pub const DUK_TYPE_MASK_NUMBER : u32 = 16 ; pub const DUK_TYPE_MASK_STRING : u32 = 32 ; pub const DUK_TYPE_MASK_OBJECT : u32 = 64 ; pub const DUK_TYPE_MASK_BUFFER : u32 = 128 ; pub const DUK_TYPE_MASK_POINTER : u32 = 256 ; pub const DUK_TYPE_MASK_LIGHTFUNC : u32 = 512 ; pub const DUK_TYPE_MASK_THROW : u32 = 1024 ; pub const DUK_TYPE_MASK_PROMOTE : u32 = 2048 ; pub const DUK_HINT_NONE : u32 = 0 ; pub const DUK_HINT_STRING : u32 = 1 ; pub const DUK_HINT_NUMBER : u32 = 2 ; pub const DUK_ENUM_INCLUDE_NONENUMERABLE : u32 = 1 ; pub const DUK_ENUM_INCLUDE_HIDDEN : u32 = 2 ; pub const DUK_ENUM_INCLUDE_SYMBOLS : u32 = 4 ; pub const DUK_ENUM_EXCLUDE_STRINGS : u32 = 8 ; pub const DUK_ENUM_OWN_PROPERTIES_ONLY : u32 = 16 ; pub const DUK_ENUM_ARRAY_INDICES_ONLY : u32 = 32 ; pub const DUK_ENUM_SORT_ARRAY_INDICES : u32 = 64 ; pub const DUK_ENUM_NO_PROXY_BEHAVIOR : u32 = 128 ; pub const DUK_COMPILE_EVAL : u32 = 8 ; pub const DUK_COMPILE_FUNCTION : u32 = 16 ; pub const DUK_COMPILE_STRICT : u32 = 32 ; pub const DUK_COMPILE_SHEBANG : u32 = 64 ; pub const DUK_COMPILE_SAFE : u32 = 128 ; pub const DUK_COMPILE_NORESULT : u32 = 256 ; pub const DUK_COMPILE_NOSOURCE : u32 = 512 ; pub const DUK_COMPILE_STRLEN : u32 = 1024 ; pub const DUK_COMPILE_NOFILENAME : u32 = 2048 ; pub const DUK_COMPILE_FUNCEXPR : u32 = 4096 ; pub const DUK_DEFPROP_WRITABLE : u32 = 1 ; pub const DUK_DEFPROP_ENUMERABLE : u32 = 2 ; pub const DUK_DEFPROP_CONFIGURABLE : u32 = 4 ; pub const DUK_DEFPROP_HAVE_WRITABLE : u32 = 8 ; pub const DUK_DEFPROP_HAVE_ENUMERABLE : u32 = 16 ; pub const DUK_DEFPROP_HAVE_CONFIGURABLE : u32 = 32 ; pub const DUK_DEFPROP_HAVE_VALUE : u32 = 64 ; pub const DUK_DEFPROP_HAVE_GETTER : u32 = 128 ; pub const DUK_DEFPROP_HAVE_SETTER : u32 = 256 ; pub const DUK_DEFPROP_FORCE : u32 = 512 ; pub const DUK_DEFPROP_SET_WRITABLE : u32 = 9 ; pub const DUK_DEFPROP_CLEAR_WRITABLE : u32 = 8 ; pub const DUK_DEFPROP_SET_ENUMERABLE : u32 = 18 ; pub const DUK_DEFPROP_CLEAR_ENUMERABLE : u32 = 16 ; pub const DUK_DEFPROP_SET_CONFIGURABLE : u32 = 36 ; pub const DUK_DEFPROP_CLEAR_CONFIGURABLE : u32 = 32 ; pub const DUK_DEFPROP_W : u32 = 1 ; pub const DUK_DEFPROP_E : u32 = 2 ; pub const DUK_DEFPROP_C : u32 = 4 ; pub const DUK_DEFPROP_WE : u32 = 3 ; pub const DUK_DEFPROP_WC : u32 = 5 ; pub const DUK_DEFPROP_WEC : u32 = 7 ; pub const DUK_DEFPROP_HAVE_W : u32 = 8 ; pub const DUK_DEFPROP_HAVE_E : u32 = 16 ; pub const DUK_DEFPROP_HAVE_C : u32 = 32 ; pub const DUK_DEFPROP_HAVE_WE : u32 = 24 ; pub const DUK_DEFPROP_HAVE_WC : u32 = 40 ; pub const DUK_DEFPROP_HAVE_WEC : u32 = 56 ; pub const DUK_DEFPROP_SET_W : u32 = 9 ; pub const DUK_DEFPROP_SET_E : u32 = 18 ; pub const DUK_DEFPROP_SET_C : u32 = 36 ; pub const DUK_DEFPROP_SET_WE : u32 = 27 ; pub const DUK_DEFPROP_SET_WC : u32 = 45 ; pub const DUK_DEFPROP_SET_WEC : u32 = 63 ; pub const DUK_DEFPROP_CLEAR_W : u32 = 8 ; pub const DUK_DEFPROP_CLEAR_E : u32 = 16 ; pub const DUK_DEFPROP_CLEAR_C : u32 = 32 ; pub const DUK_DEFPROP_CLEAR_WE : u32 = 24 ; pub const DUK_DEFPROP_CLEAR_WC : u32 = 40 ; pub const DUK_DEFPROP_CLEAR_WEC : u32 = 56 ; pub const DUK_DEFPROP_ATTR_W : u32 = 57 ; pub const DUK_DEFPROP_ATTR_E : u32 = 58 ; pub const DUK_DEFPROP_ATTR_C : u32 = 60 ; pub const DUK_DEFPROP_ATTR_WE : u32 = 59 ; pub const DUK_DEFPROP_ATTR_WC : u32 = 61 ; pub const DUK_DEFPROP_ATTR_WEC : u32 = 63 ; pub const DUK_THREAD_NEW_GLOBAL_ENV : u32 = 1 ; pub const DUK_GC_COMPACT : u32 = 1 ; pub const DUK_ERR_NONE : u32 = 0 ; pub const DUK_ERR_ERROR : u32 = 1 ; pub const DUK_ERR_EVAL_ERROR : u32 = 2 ; pub const DUK_ERR_RANGE_ERROR : u32 = 3 ; pub const DUK_ERR_REFERENCE_ERROR : u32 = 4 ; pub const DUK_ERR_SYNTAX_ERROR : u32 = 5 ; pub const DUK_ERR_TYPE_ERROR : u32 = 6 ; pub const DUK_ERR_URI_ERROR : u32 = 7 ; pub const DUK_RET_ERROR : i32 = -1 ; pub const DUK_RET_EVAL_ERROR : i32 = -2 ; pub const DUK_RET_RANGE_ERROR : i32 = -3 ; pub const DUK_RET_REFERENCE_ERROR : i32 = -4 ; pub const DUK_RET_SYNTAX_ERROR : i32 = -5 ; pub const DUK_RET_TYPE_ERROR : i32 = -6 ; pub const DUK_RET_URI_ERROR : i32 = -7 ; pub const DUK_EXEC_SUCCESS : u32 = 0 ; pub const DUK_EXEC_ERROR : u32 = 1 ; pub const DUK_LEVEL_DEBUG : u32 = 0 ; pub const DUK_LEVEL_DDEBUG : u32 = 1 ; pub const DUK_LEVEL_DDDEBUG : u32 = 2 ; pub const DUK_BUF_FLAG_DYNAMIC : u32 = 1 ; pub const DUK_BUF_FLAG_EXTERNAL : u32 = 2 ; pub const DUK_BUF_FLAG_NOZERO : u32 = 4 ; pub const DUK_BUFOBJ_ARRAYBUFFER : u32 = 0 ; pub const DUK_BUFOBJ_NODEJS_BUFFER : u32 = 1 ; pub const DUK_BUFOBJ_DATAVIEW : u32 = 2 ; pub const DUK_BUFOBJ_INT8ARRAY : u32 = 3 ; pub const DUK_BUFOBJ_UINT8ARRAY : u32 = 4 ; pub const DUK_BUFOBJ_UINT8CLAMPEDARRAY : u32 = 5 ; pub const DUK_BUFOBJ_INT16ARRAY : u32 = 6 ; pub const DUK_BUFOBJ_UINT16ARRAY : u32 = 7 ; pub const DUK_BUFOBJ_INT32ARRAY : u32 = 8 ; pub const DUK_BUFOBJ_UINT32ARRAY : u32 = 9 ; pub const DUK_BUFOBJ_FLOAT32ARRAY : u32 = 10 ; pub const DUK_BUFOBJ_FLOAT64ARRAY : u32 = 11 ; pub const DUK_BUF_MODE_FIXED : u32 = 0 ; pub const DUK_BUF_MODE_DYNAMIC : u32 = 1 ; pub const DUK_BUF_MODE_DONTCARE : u32 = 2 ; pub const DUK_DATE_MSEC_SECOND : u32 = 1000 ; pub const DUK_DATE_MSEC_MINUTE : u32 = 60000 ; pub const DUK_DATE_MSEC_HOUR : u32 = 3600000 ; pub const DUK_DATE_MSEC_DAY : u32 = 86400000 ; pub const DUK_DATE_MIN_ECMA_YEAR : i32 = -271821 ; pub const DUK_DATE_MAX_ECMA_YEAR : u32 = 275760 ; pub const DUK_DATE_IDX_YEAR : u32 = 0 ; pub const DUK_DATE_IDX_MONTH : u32 = 1 ; pub const DUK_DATE_IDX_DAY : u32 = 2 ; pub const DUK_DATE_IDX_HOUR : u32 = 3 ; pub const DUK_DATE_IDX_MINUTE : u32 = 4 ; pub const DUK_DATE_IDX_SECOND : u32 = 5 ; pub const DUK_DATE_IDX_MILLISECOND : u32 = 6 ; pub const DUK_DATE_IDX_WEEKDAY : u32 = 7 ; pub const DUK_DATE_IDX_NUM_PARTS : u32 = 8 ; pub const DUK_DATE_FLAG_NAN_TO_ZERO : u32 = 1 ; pub const DUK_DATE_FLAG_NAN_TO_RANGE_ERROR : u32 = 2 ; pub const DUK_DATE_FLAG_ONEBASED : u32 = 4 ; pub const DUK_DATE_FLAG_EQUIVYEAR : u32 = 8 ; pub const DUK_DATE_FLAG_LOCALTIME : u32 = 16 ; pub const DUK_DATE_FLAG_SUB1900 : u32 = 32 ; pub const DUK_DATE_FLAG_TOSTRING_DATE : u32 = 64 ; pub const DUK_DATE_FLAG_TOSTRING_TIME : u32 = 128 ; pub const DUK_DATE_FLAG_TOSTRING_LOCALE : u32 = 256 ; pub const DUK_DATE_FLAG_TIMESETTER : u32 = 512 ; pub const DUK_DATE_FLAG_YEAR_FIXUP : u32 = 1024 ; pub const DUK_DATE_FLAG_SEP_T : u32 = 2048 ; pub const DUK_DATE_FLAG_VALUE_SHIFT : u32 = 12 ; pub type __u_char = :: std :: os :: raw :: c_uchar ; pub type __u_short = :: std :: os :: raw :: c_ushort ; pub type __u_int = :: std :: os :: raw :: c_uint ; pub type __u_long = :: std :: os :: raw :: c_ulong ; pub type __int8_t = :: std :: os :: raw :: c_schar ; pub type __uint8_t = :: std :: os :: raw :: c_uchar ; pub type __int16_t = :: std :: os :: raw :: c_short ; pub type __uint16_t = :: std :: os :: raw :: c_ushort ; pub type __int32_t = :: std :: os :: raw :: c_int ; pub type __uint32_t = :: std :: os :: raw :: c_uint ; pub type __int64_t = :: std :: os :: raw :: c_long ; pub type __uint64_t = :: std :: os :: raw :: c_ulong ; pub type __int_least8_t = __int8_t ; pub type __uint_least8_t = __uint8_t ; pub type __int_least16_t = __int16_t ; pub type __uint_least16_t = __uint16_t ; pub type __int_least32_t = __int32_t ; pub type __uint_least32_t = __uint32_t ; pub type __int_least64_t = __int64_t ; pub type __uint_least64_t = __uint64_t ; pub type __quad_t = :: std :: os :: raw :: c_long ; pub type __u_quad_t = :: std :: os :: raw :: c_ulong ; pub type __intmax_t = :: std :: os :: raw :: c_long ; pub type __uintmax_t = :: std :: os :: raw :: c_ulong ; pub type __dev_t = :: std :: os :: raw :: c_ulong ; pub type __uid_t = :: std :: os :: raw :: c_uint ; pub type __gid_t = :: std :: os :: raw :: c_uint ; pub type __ino_t = :: std :: os :: raw :: c_ulong ; pub type __ino64_t = :: std :: os :: raw :: c_ulong ; pub type __mode_t = :: std :: os :: raw :: c_uint ; pub type __nlink_t = :: std :: os :: raw :: c_ulong ; pub type __off_t = :: std :: os :: raw :: c_long ; pub type __off64_t = :: std :: os :: raw :: c_long ; pub type __pid_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __fsid_t { pub __val : [ :: std :: os :: raw :: c_int ; 2usize ] , } # [ test ] fn bindgen_test_layout___fsid_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __fsid_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __fsid_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __fsid_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __fsid_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __fsid_t > ( ) ) ) . __val as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __fsid_t ) , "::" , stringify ! ( __val ) ) ) ; } pub type __clock_t = :: std :: os :: raw :: c_long ; pub type __rlim_t = :: std :: os :: raw :: c_ulong ; pub type __rlim64_t = :: std :: os :: raw :: c_ulong ; pub type __id_t = :: std :: os :: raw :: c_uint ; pub type __time_t = :: std :: os :: raw :: c_long ; pub type __useconds_t = :: std :: os :: raw :: c_uint ; pub type __suseconds_t = :: std :: os :: raw :: c_long ; pub type __daddr_t = :: std :: os :: raw :: c_int ; pub type __key_t = :: std :: os :: raw :: c_int ; pub type __clockid_t = :: std :: os :: raw :: c_int ; pub type __timer_t = * mut :: std :: os :: raw :: c_void ; pub type __blksize_t = :: std :: os :: raw :: c_long ; pub type __blkcnt_t = :: std :: os :: raw :: c_long ; pub type __blkcnt64_t = :: std :: os :: raw :: c_long ; pub type __fsblkcnt_t = :: std :: os :: raw :: c_ulong ; pub type __fsblkcnt64_t = :: std :: os :: raw :: c_ulong ; pub type __fsfilcnt_t = :: std :: os :: raw :: c_ulong ; pub type __fsfilcnt64_t = :: std :: os :: raw :: c_ulong ; pub type __fsword_t = :: std :: os :: raw :: c_long ; pub type __ssize_t = :: std :: os :: raw :: c_long ; pub type __syscall_slong_t = :: std :: os :: raw :: c_long ; pub type __syscall_ulong_t = :: std :: os :: raw :: c_ulong ; pub type __loff_t = __off64_t ; pub type __caddr_t = * mut :: std :: os :: raw :: c_char ; pub type __intptr_t = :: std :: os :: raw :: c_long ; pub type __socklen_t = :: std :: os :: raw :: c_uint ; pub type __sig_atomic_t = :: std :: os :: raw :: c_int ; pub type u_char = __u_char ; pub type u_short = __u_short ; pub type u_int = __u_int ; pub type u_long = __u_long ; pub type quad_t = __quad_t ; pub type u_quad_t = __u_quad_t ; pub type fsid_t = __fsid_t ; pub type loff_t = __loff_t ; pub type ino_t = __ino_t ; pub type dev_t = __dev_t ; pub type gid_t = __gid_t ; pub type mode_t = __mode_t ; pub type nlink_t = __nlink_t ; pub type uid_t = __uid_t ; pub type off_t = __off_t ; pub type pid_t = __pid_t ; pub type id_t = __id_t ; pub type daddr_t = __daddr_t ; pub type caddr_t = __caddr_t ; pub type key_t = __key_t ; pub type clock_t = __clock_t ; pub type clockid_t = __clockid_t ; pub type time_t = __time_t ; pub type timer_t = __timer_t ; pub type ulong = :: std :: os :: raw :: c_ulong ; pub type ushort = :: std :: os :: raw :: c_ushort ; pub type uint = :: std :: os :: raw :: c_uint ; pub type u_int8_t = :: std :: os :: raw :: c_uchar ; pub type u_int16_t = :: std :: os :: raw :: c_ushort ; pub type u_int32_t = :: std :: os :: raw :: c_uint ; pub type u_int64_t = :: std :: os :: raw :: c_ulong ; pub type register_t = :: std :: os :: raw :: c_long ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __sigset_t { pub __val : [ :: std :: os :: raw :: c_ulong ; 16usize ] , } # [ test ] fn bindgen_test_layout___sigset_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __sigset_t > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( __sigset_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __sigset_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __sigset_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sigset_t > ( ) ) ) . __val as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __sigset_t ) , "::" , stringify ! ( __val ) ) ) ; } pub type sigset_t = __sigset_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct timeval { pub tv_sec : __time_t , pub tv_usec : __suseconds_t , } # [ test ] fn bindgen_test_layout_timeval ( ) { assert_eq ! ( :: std :: mem :: size_of :: < timeval > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( timeval ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < timeval > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( timeval ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < timeval > ( ) ) ) . tv_sec as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( timeval ) , "::" , stringify ! ( tv_sec ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < timeval > ( ) ) ) . tv_usec as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( timeval ) , "::" , stringify ! ( tv_usec ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct timespec { pub tv_sec : __time_t , pub tv_nsec : __syscall_slong_t , } # [ test ] fn bindgen_test_layout_timespec ( ) { assert_eq ! ( :: std :: mem :: size_of :: < timespec > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( timespec ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < timespec > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( timespec ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < timespec > ( ) ) ) . tv_sec as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( timespec ) , "::" , stringify ! ( tv_sec ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < timespec > ( ) ) ) . tv_nsec as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( timespec ) , "::" , stringify ! ( tv_nsec ) ) ) ; } pub type suseconds_t = __suseconds_t ; pub type __fd_mask = :: std :: os :: raw :: c_long ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct fd_set { pub __fds_bits : [ __fd_mask ; 16usize ] , } # [ test ] fn bindgen_test_layout_fd_set ( ) { assert_eq ! ( :: std :: mem :: size_of :: < fd_set > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( fd_set ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < fd_set > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( fd_set ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < fd_set > ( ) ) ) . __fds_bits as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( fd_set ) , "::" , stringify ! ( __fds_bits ) ) ) ; } pub type fd_mask = __fd_mask ; extern "C" { pub fn select ( __nfds : :: std :: os :: raw :: c_int , __readfds : * mut fd_set , __writefds : * mut fd_set , __exceptfds : * mut fd_set , __timeout : * mut timeval ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pselect ( __nfds : :: std :: os :: raw :: c_int , __readfds : * mut fd_set , __writefds : * mut fd_set , __exceptfds : * mut fd_set , __timeout : * const timespec , __sigmask : * const __sigset_t ) -> :: std :: os :: raw :: c_int ; } pub type blksize_t = __blksize_t ; pub type blkcnt_t = __blkcnt_t ; pub type fsblkcnt_t = __fsblkcnt_t ; pub type fsfilcnt_t = __fsfilcnt_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __pthread_rwlock_arch_t { pub __readers : :: std :: os :: raw :: c_uint , pub __writers : :: std :: os :: raw :: c_uint , pub __wrphase_futex : :: std :: os :: raw :: c_uint , pub __writers_futex : :: std :: os :: raw :: c_uint , pub __pad3 : :: std :: os :: raw :: c_uint , pub __pad4 : :: std :: os :: raw :: c_uint , pub __cur_writer : :: std :: os :: raw :: c_int , pub __shared : :: std :: os :: raw :: c_int , pub __rwelision : :: std :: os :: raw :: c_schar , pub __pad1 : [ :: std :: os :: raw :: c_uchar ; 7usize ] , pub __pad2 : :: std :: os :: raw :: c_ulong , pub __flags : :: std :: os :: raw :: c_uint , } # [ test ] fn bindgen_test_layout___pthread_rwlock_arch_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_rwlock_arch_t > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( __pthread_rwlock_arch_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_rwlock_arch_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_rwlock_arch_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_rwlock_arch_t > ( ) ) ) . __readers as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __readers ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_rwlock_arch_t > ( ) ) ) . __writers as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __writers ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_rwlock_arch_t > ( ) ) ) . __wrphase_futex as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __wrphase_futex ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_rwlock_arch_t > ( ) ) ) . __writers_futex as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __writers_futex ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_rwlock_arch_t > ( ) ) ) . __pad3 as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __pad3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_rwlock_arch_t > ( ) ) ) . __pad4 as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __pad4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_rwlock_arch_t > ( ) ) ) . __cur_writer as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __cur_writer ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_rwlock_arch_t > ( ) ) ) . __shared as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __shared ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_rwlock_arch_t > ( ) ) ) . __rwelision as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __rwelision ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_rwlock_arch_t > ( ) ) ) . __pad1 as * const _ as usize } , 33usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __pad1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_rwlock_arch_t > ( ) ) ) . __pad2 as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __pad2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_rwlock_arch_t > ( ) ) ) . __flags as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __flags ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __pthread_internal_list { pub __prev : * mut __pthread_internal_list , pub __next : * mut __pthread_internal_list , } # [ test ] fn bindgen_test_layout___pthread_internal_list ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_internal_list > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( __pthread_internal_list ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_internal_list > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_internal_list ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_internal_list > ( ) ) ) . __prev as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_internal_list ) , "::" , stringify ! ( __prev ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_internal_list > ( ) ) ) . __next as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_internal_list ) , "::" , stringify ! ( __next ) ) ) ; } pub type __pthread_list_t = __pthread_internal_list ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __pthread_mutex_s { pub __lock : :: std :: os :: raw :: c_int , pub __count : :: std :: os :: raw :: c_uint , pub __owner : :: std :: os :: raw :: c_int , pub __nusers : :: std :: os :: raw :: c_uint , pub __kind : :: std :: os :: raw :: c_int , pub __spins : :: std :: os :: raw :: c_short , pub __elision : :: std :: os :: raw :: c_short , pub __list : __pthread_list_t , } # [ test ] fn bindgen_test_layout___pthread_mutex_s ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_mutex_s > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( __pthread_mutex_s ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_mutex_s > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_mutex_s ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_mutex_s > ( ) ) ) . __lock as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __lock ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_mutex_s > ( ) ) ) . __count as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __count ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_mutex_s > ( ) ) ) . __owner as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __owner ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_mutex_s > ( ) ) ) . __nusers as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __nusers ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_mutex_s > ( ) ) ) . __kind as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __kind ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_mutex_s > ( ) ) ) . __spins as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __spins ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_mutex_s > ( ) ) ) . __elision as * const _ as usize } , 22usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __elision ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_mutex_s > ( ) ) ) . __list as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __list ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct __pthread_cond_s { pub __bindgen_anon_1 : __pthread_cond_s__bindgen_ty_1 , pub __bindgen_anon_2 : __pthread_cond_s__bindgen_ty_2 , pub __g_refs : [ :: std :: os :: raw :: c_uint ; 2usize ] , pub __g_size : [ :: std :: os :: raw :: c_uint ; 2usize ] , pub __g1_orig_size : :: std :: os :: raw :: c_uint , pub __wrefs : :: std :: os :: raw :: c_uint , pub __g_signals : [ :: std :: os :: raw :: c_uint ; 2usize ] , } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union __pthread_cond_s__bindgen_ty_1 { pub __wseq : :: std :: os :: raw :: c_ulonglong , pub __wseq32 : __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 , _bindgen_union_align : u64 , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 { pub __low : :: std :: os :: raw :: c_uint , pub __high : :: std :: os :: raw :: c_uint , } # [ test ] fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 > ( ) ) ) . __low as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! ( __low ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 > ( ) ) ) . __high as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! ( __high ) ) ) ; } # [ test ] fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_cond_s__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __pthread_cond_s__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_cond_s__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_cond_s__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_cond_s__bindgen_ty_1 > ( ) ) ) . __wseq as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_1 ) , "::" , stringify ! ( __wseq ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_cond_s__bindgen_ty_1 > ( ) ) ) . __wseq32 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_1 ) , "::" , stringify ! ( __wseq32 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union __pthread_cond_s__bindgen_ty_2 { pub __g1_start : :: std :: os :: raw :: c_ulonglong , pub __g1_start32 : __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 , _bindgen_union_align : u64 , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 { pub __low : :: std :: os :: raw :: c_uint , pub __high : :: std :: os :: raw :: c_uint , } # [ test ] fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 > ( ) ) ) . __low as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ) , "::" , stringify ! ( __low ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 > ( ) ) ) . __high as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ) , "::" , stringify ! ( __high ) ) ) ; } # [ test ] fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_cond_s__bindgen_ty_2 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __pthread_cond_s__bindgen_ty_2 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_cond_s__bindgen_ty_2 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_cond_s__bindgen_ty_2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_cond_s__bindgen_ty_2 > ( ) ) ) . __g1_start as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_2 ) , "::" , stringify ! ( __g1_start ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_cond_s__bindgen_ty_2 > ( ) ) ) . __g1_start32 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_2 ) , "::" , stringify ! ( __g1_start32 ) ) ) ; } # [ test ] fn bindgen_test_layout___pthread_cond_s ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_cond_s > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( __pthread_cond_s ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_cond_s > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_cond_s ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_cond_s > ( ) ) ) . __g_refs as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_cond_s ) , "::" , stringify ! ( __g_refs ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_cond_s > ( ) ) ) . __g_size as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_cond_s ) , "::" , stringify ! ( __g_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_cond_s > ( ) ) ) . __g1_orig_size as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_cond_s ) , "::" , stringify ! ( __g1_orig_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_cond_s > ( ) ) ) . __wrefs as * const _ as usize } , 36usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_cond_s ) , "::" , stringify ! ( __wrefs ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_cond_s > ( ) ) ) . __g_signals as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_cond_s ) , "::" , stringify ! ( __g_signals ) ) ) ; } pub type pthread_t = :: std :: os :: raw :: c_ulong ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_mutexattr_t { pub __size : [ :: std :: os :: raw :: c_char ; 4usize ] , pub __align : :: std :: os :: raw :: c_int , _bindgen_union_align : u32 , } # [ test ] fn bindgen_test_layout_pthread_mutexattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_mutexattr_t > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( pthread_mutexattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_mutexattr_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( pthread_mutexattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_mutexattr_t > ( ) ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_mutexattr_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_mutexattr_t > ( ) ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_mutexattr_t ) , "::" , stringify ! ( __align ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_condattr_t { pub __size : [ :: std :: os :: raw :: c_char ; 4usize ] , pub __align : :: std :: os :: raw :: c_int , _bindgen_union_align : u32 , } # [ test ] fn bindgen_test_layout_pthread_condattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_condattr_t > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( pthread_condattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_condattr_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( pthread_condattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_condattr_t > ( ) ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_condattr_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_condattr_t > ( ) ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_condattr_t ) , "::" , stringify ! ( __align ) ) ) ; } pub type pthread_key_t = :: std :: os :: raw :: c_uint ; pub type pthread_once_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_attr_t { pub __size : [ :: std :: os :: raw :: c_char ; 56usize ] , pub __align : :: std :: os :: raw :: c_long , _bindgen_union_align : [ u64 ; 7usize ] , } # [ test ] fn bindgen_test_layout_pthread_attr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_attr_t > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( pthread_attr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_attr_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_attr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_attr_t > ( ) ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_attr_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_attr_t > ( ) ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_attr_t ) , "::" , stringify ! ( __align ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_mutex_t { pub __data : __pthread_mutex_s , pub __size : [ :: std :: os :: raw :: c_char ; 40usize ] , pub __align : :: std :: os :: raw :: c_long , _bindgen_union_align : [ u64 ; 5usize ] , } # [ test ] fn bindgen_test_layout_pthread_mutex_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_mutex_t > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( pthread_mutex_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_mutex_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_mutex_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_mutex_t > ( ) ) ) . __data as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_mutex_t ) , "::" , stringify ! ( __data ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_mutex_t > ( ) ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_mutex_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_mutex_t > ( ) ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_mutex_t ) , "::" , stringify ! ( __align ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_cond_t { pub __data : __pthread_cond_s , pub __size : [ :: std :: os :: raw :: c_char ; 48usize ] , pub __align : :: std :: os :: raw :: c_longlong , _bindgen_union_align : [ u64 ; 6usize ] , } # [ test ] fn bindgen_test_layout_pthread_cond_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_cond_t > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( pthread_cond_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_cond_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_cond_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_cond_t > ( ) ) ) . __data as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_cond_t ) , "::" , stringify ! ( __data ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_cond_t > ( ) ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_cond_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_cond_t > ( ) ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_cond_t ) , "::" , stringify ! ( __align ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_rwlock_t { pub __data : __pthread_rwlock_arch_t , pub __size : [ :: std :: os :: raw :: c_char ; 56usize ] , pub __align : :: std :: os :: raw :: c_long , _bindgen_union_align : [ u64 ; 7usize ] , } # [ test ] fn bindgen_test_layout_pthread_rwlock_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_rwlock_t > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( pthread_rwlock_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_rwlock_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_rwlock_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_rwlock_t > ( ) ) ) . __data as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_rwlock_t ) , "::" , stringify ! ( __data ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_rwlock_t > ( ) ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_rwlock_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_rwlock_t > ( ) ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_rwlock_t ) , "::" , stringify ! ( __align ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_rwlockattr_t { pub __size : [ :: std :: os :: raw :: c_char ; 8usize ] , pub __align : :: std :: os :: raw :: c_long , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout_pthread_rwlockattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_rwlockattr_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( pthread_rwlockattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_rwlockattr_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_rwlockattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_rwlockattr_t > ( ) ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_rwlockattr_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_rwlockattr_t > ( ) ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_rwlockattr_t ) , "::" , stringify ! ( __align ) ) ) ; } pub type pthread_spinlock_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_barrier_t { pub __size : [ :: std :: os :: raw :: c_char ; 32usize ] , pub __align : :: std :: os :: raw :: c_long , _bindgen_union_align : [ u64 ; 4usize ] , } # [ test ] fn bindgen_test_layout_pthread_barrier_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_barrier_t > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( pthread_barrier_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_barrier_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_barrier_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_barrier_t > ( ) ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_barrier_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_barrier_t > ( ) ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_barrier_t ) , "::" , stringify ! ( __align ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_barrierattr_t { pub __size : [ :: std :: os :: raw :: c_char ; 4usize ] , pub __align : :: std :: os :: raw :: c_int , _bindgen_union_align : u32 , } # [ test ] fn bindgen_test_layout_pthread_barrierattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_barrierattr_t > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( pthread_barrierattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_barrierattr_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( pthread_barrierattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_barrierattr_t > ( ) ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_barrierattr_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_barrierattr_t > ( ) ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_barrierattr_t ) , "::" , stringify ! ( __align ) ) ) ; } pub type int_least8_t = __int_least8_t ; pub type int_least16_t = __int_least16_t ; pub type int_least32_t = __int_least32_t ; pub type int_least64_t = __int_least64_t ; pub type uint_least8_t = __uint_least8_t ; pub type uint_least16_t = __uint_least16_t ; pub type uint_least32_t = __uint_least32_t ; pub type uint_least64_t = __uint_least64_t ; pub type int_fast8_t = :: std :: os :: raw :: c_schar ; pub type int_fast16_t = :: std :: os :: raw :: c_long ; pub type int_fast32_t = :: std :: os :: raw :: c_long ; pub type int_fast64_t = :: std :: os :: raw :: c_long ; pub type uint_fast8_t = :: std :: os :: raw :: c_uchar ; pub type uint_fast16_t = :: std :: os :: raw :: c_ulong ; pub type uint_fast32_t = :: std :: os :: raw :: c_ulong ; pub type uint_fast64_t = :: std :: os :: raw :: c_ulong ; pub type intmax_t = __intmax_t ; pub type uintmax_t = __uintmax_t ; pub type sig_atomic_t = __sig_atomic_t ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union sigval { pub sival_int : :: std :: os :: raw :: c_int , pub sival_ptr : * mut :: std :: os :: raw :: c_void , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout_sigval ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sigval > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( sigval ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sigval > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( sigval ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigval > ( ) ) ) . sival_int as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( sigval ) , "::" , stringify ! ( sival_int ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigval > ( ) ) ) . sival_ptr as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( sigval ) , "::" , stringify ! ( sival_ptr ) ) ) ; } pub type __sigval_t = sigval ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct siginfo_t { pub si_signo : :: std :: os :: raw :: c_int , pub si_errno : :: std :: os :: raw :: c_int , pub si_code : :: std :: os :: raw :: c_int , pub __pad0 : :: std :: os :: raw :: c_int , pub _sifields : siginfo_t__bindgen_ty_1 , } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union siginfo_t__bindgen_ty_1 { pub _pad : [ :: std :: os :: raw :: c_int ; 28usize ] , pub _kill : siginfo_t__bindgen_ty_1__bindgen_ty_1 , pub _timer : siginfo_t__bindgen_ty_1__bindgen_ty_2 , pub _rt : siginfo_t__bindgen_ty_1__bindgen_ty_3 , pub _sigchld : siginfo_t__bindgen_ty_1__bindgen_ty_4 , pub _sigfault : siginfo_t__bindgen_ty_1__bindgen_ty_5 , pub _sigpoll : siginfo_t__bindgen_ty_1__bindgen_ty_6 , pub _sigsys : siginfo_t__bindgen_ty_1__bindgen_ty_7 , _bindgen_union_align : [ u64 ; 14usize ] , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1 { pub si_pid : __pid_t , pub si_uid : __uid_t , } # [ test ] fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_1 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_1 > ( ) ) ) . si_pid as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! ( si_pid ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_1 > ( ) ) ) . si_uid as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! ( si_uid ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct siginfo_t__bindgen_ty_1__bindgen_ty_2 { pub si_tid : :: std :: os :: raw :: c_int , pub si_overrun : :: std :: os :: raw :: c_int , pub si_sigval : __sigval_t , } # [ test ] fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_2 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_2 > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_2 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_2 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_2 > ( ) ) ) . si_tid as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_2 ) , "::" , stringify ! ( si_tid ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_2 > ( ) ) ) . si_overrun as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_2 ) , "::" , stringify ! ( si_overrun ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_2 > ( ) ) ) . si_sigval as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_2 ) , "::" , stringify ! ( si_sigval ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct siginfo_t__bindgen_ty_1__bindgen_ty_3 { pub si_pid : __pid_t , pub si_uid : __uid_t , pub si_sigval : __sigval_t , } # [ test ] fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_3 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_3 > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_3 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_3 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_3 > ( ) ) ) . si_pid as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_3 ) , "::" , stringify ! ( si_pid ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_3 > ( ) ) ) . si_uid as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_3 ) , "::" , stringify ! ( si_uid ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_3 > ( ) ) ) . si_sigval as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_3 ) , "::" , stringify ! ( si_sigval ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct siginfo_t__bindgen_ty_1__bindgen_ty_4 { pub si_pid : __pid_t , pub si_uid : __uid_t , pub si_status : :: std :: os :: raw :: c_int , pub si_utime : __clock_t , pub si_stime : __clock_t , } # [ test ] fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_4 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_4 > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_4 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_4 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_4 > ( ) ) ) . si_pid as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_4 ) , "::" , stringify ! ( si_pid ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_4 > ( ) ) ) . si_uid as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_4 ) , "::" , stringify ! ( si_uid ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_4 > ( ) ) ) . si_status as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_4 ) , "::" , stringify ! ( si_status ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_4 > ( ) ) ) . si_utime as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_4 ) , "::" , stringify ! ( si_utime ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_4 > ( ) ) ) . si_stime as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_4 ) , "::" , stringify ! ( si_stime ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5 { pub si_addr : * mut :: std :: os :: raw :: c_void , pub si_addr_lsb : :: std :: os :: raw :: c_short , pub _bounds : siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 , } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 { pub _addr_bnd : siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 , pub _pkey : __uint32_t , _bindgen_union_align : [ u64 ; 2usize ] , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 { pub _lower : * mut :: std :: os :: raw :: c_void , pub _upper : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 > ( ) ) ) . _lower as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! ( _lower ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 > ( ) ) ) . _upper as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! ( _upper ) ) ) ; } # [ test ] fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 > ( ) ) ) . _addr_bnd as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 ) , "::" , stringify ! ( _addr_bnd ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 > ( ) ) ) . _pkey as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 ) , "::" , stringify ! ( _pkey ) ) ) ; } # [ test ] fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_5 > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_5 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_5 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_5 > ( ) ) ) . si_addr as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_5 ) , "::" , stringify ! ( si_addr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_5 > ( ) ) ) . si_addr_lsb as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_5 ) , "::" , stringify ! ( si_addr_lsb ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_5 > ( ) ) ) . _bounds as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_5 ) , "::" , stringify ! ( _bounds ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct siginfo_t__bindgen_ty_1__bindgen_ty_6 { pub si_band : :: std :: os :: raw :: c_long , pub si_fd : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_6 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_6 > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_6 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_6 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_6 > ( ) ) ) . si_band as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_6 ) , "::" , stringify ! ( si_band ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_6 > ( ) ) ) . si_fd as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_6 ) , "::" , stringify ! ( si_fd ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct siginfo_t__bindgen_ty_1__bindgen_ty_7 { pub _call_addr : * mut :: std :: os :: raw :: c_void , pub _syscall : :: std :: os :: raw :: c_int , pub _arch : :: std :: os :: raw :: c_uint , } # [ test ] fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_7 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_7 > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_7 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_7 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_7 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_7 > ( ) ) ) . _call_addr as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_7 ) , "::" , stringify ! ( _call_addr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_7 > ( ) ) ) . _syscall as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_7 ) , "::" , stringify ! ( _syscall ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_7 > ( ) ) ) . _arch as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_7 ) , "::" , stringify ! ( _arch ) ) ) ; } # [ test ] fn bindgen_test_layout_siginfo_t__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < siginfo_t__bindgen_ty_1 > ( ) , 112usize , concat ! ( "Size of: " , stringify ! ( siginfo_t__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < siginfo_t__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( siginfo_t__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1 > ( ) ) ) . _pad as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1 ) , "::" , stringify ! ( _pad ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1 > ( ) ) ) . _kill as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1 ) , "::" , stringify ! ( _kill ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1 > ( ) ) ) . _timer as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1 ) , "::" , stringify ! ( _timer ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1 > ( ) ) ) . _rt as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1 ) , "::" , stringify ! ( _rt ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1 > ( ) ) ) . _sigchld as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1 ) , "::" , stringify ! ( _sigchld ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1 > ( ) ) ) . _sigfault as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1 ) , "::" , stringify ! ( _sigfault ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1 > ( ) ) ) . _sigpoll as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1 ) , "::" , stringify ! ( _sigpoll ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1 > ( ) ) ) . _sigsys as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1 ) , "::" , stringify ! ( _sigsys ) ) ) ; } # [ test ] fn bindgen_test_layout_siginfo_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < siginfo_t > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( siginfo_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < siginfo_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( siginfo_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t > ( ) ) ) . si_signo as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t ) , "::" , stringify ! ( si_signo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t > ( ) ) ) . si_errno as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t ) , "::" , stringify ! ( si_errno ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t > ( ) ) ) . si_code as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t ) , "::" , stringify ! ( si_code ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t > ( ) ) ) . __pad0 as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t ) , "::" , stringify ! ( __pad0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t > ( ) ) ) . _sifields as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t ) , "::" , stringify ! ( _sifields ) ) ) ; } pub const SI_ASYNCNL : _bindgen_ty_1 = -60 ; pub const SI_DETHREAD : _bindgen_ty_1 = -7 ; pub const SI_TKILL : _bindgen_ty_1 = -6 ; pub const SI_SIGIO : _bindgen_ty_1 = -5 ; pub const SI_ASYNCIO : _bindgen_ty_1 = -4 ; pub const SI_MESGQ : _bindgen_ty_1 = -3 ; pub const SI_TIMER : _bindgen_ty_1 = -2 ; pub const SI_QUEUE : _bindgen_ty_1 = -1 ; pub const SI_USER : _bindgen_ty_1 = 0 ; pub const SI_KERNEL : _bindgen_ty_1 = 128 ; pub type _bindgen_ty_1 = i32 ; pub const ILL_ILLOPC : _bindgen_ty_2 = 1 ; pub const ILL_ILLOPN : _bindgen_ty_2 = 2 ; pub const ILL_ILLADR : _bindgen_ty_2 = 3 ; pub const ILL_ILLTRP : _bindgen_ty_2 = 4 ; pub const ILL_PRVOPC : _bindgen_ty_2 = 5 ; pub const ILL_PRVREG : _bindgen_ty_2 = 6 ; pub const ILL_COPROC : _bindgen_ty_2 = 7 ; pub const ILL_BADSTK : _bindgen_ty_2 = 8 ; pub const ILL_BADIADDR : _bindgen_ty_2 = 9 ; pub type _bindgen_ty_2 = u32 ; pub const FPE_INTDIV : _bindgen_ty_3 = 1 ; pub const FPE_INTOVF : _bindgen_ty_3 = 2 ; pub const FPE_FLTDIV : _bindgen_ty_3 = 3 ; pub const FPE_FLTOVF : _bindgen_ty_3 = 4 ; pub const FPE_FLTUND : _bindgen_ty_3 = 5 ; pub const FPE_FLTRES : _bindgen_ty_3 = 6 ; pub const FPE_FLTINV : _bindgen_ty_3 = 7 ; pub const FPE_FLTSUB : _bindgen_ty_3 = 8 ; pub const FPE_FLTUNK : _bindgen_ty_3 = 14 ; pub const FPE_CONDTRAP : _bindgen_ty_3 = 15 ; pub type _bindgen_ty_3 = u32 ; pub const SEGV_MAPERR : _bindgen_ty_4 = 1 ; pub const SEGV_ACCERR : _bindgen_ty_4 = 2 ; pub const SEGV_BNDERR : _bindgen_ty_4 = 3 ; pub const SEGV_PKUERR : _bindgen_ty_4 = 4 ; pub const SEGV_ACCADI : _bindgen_ty_4 = 5 ; pub const SEGV_ADIDERR : _bindgen_ty_4 = 6 ; pub const SEGV_ADIPERR : _bindgen_ty_4 = 7 ; pub type _bindgen_ty_4 = u32 ; pub const BUS_ADRALN : _bindgen_ty_5 = 1 ; pub const BUS_ADRERR : _bindgen_ty_5 = 2 ; pub const BUS_OBJERR : _bindgen_ty_5 = 3 ; pub const BUS_MCEERR_AR : _bindgen_ty_5 = 4 ; pub const BUS_MCEERR_AO : _bindgen_ty_5 = 5 ; pub type _bindgen_ty_5 = u32 ; pub const CLD_EXITED : _bindgen_ty_6 = 1 ; pub const CLD_KILLED : _bindgen_ty_6 = 2 ; pub const CLD_DUMPED : _bindgen_ty_6 = 3 ; pub const CLD_TRAPPED : _bindgen_ty_6 = 4 ; pub const CLD_STOPPED : _bindgen_ty_6 = 5 ; pub const CLD_CONTINUED : _bindgen_ty_6 = 6 ; pub type _bindgen_ty_6 = u32 ; pub const POLL_IN : _bindgen_ty_7 = 1 ; pub const POLL_OUT : _bindgen_ty_7 = 2 ; pub const POLL_MSG : _bindgen_ty_7 = 3 ; pub const POLL_ERR : _bindgen_ty_7 = 4 ; pub const POLL_PRI : _bindgen_ty_7 = 5 ; pub const POLL_HUP : _bindgen_ty_7 = 6 ; pub type _bindgen_ty_7 = u32 ; pub type sigval_t = __sigval_t ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct sigevent { pub sigev_value : __sigval_t , pub sigev_signo : :: std :: os :: raw :: c_int , pub sigev_notify : :: std :: os :: raw :: c_int , pub _sigev_un : sigevent__bindgen_ty_1 , } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union sigevent__bindgen_ty_1 { pub _pad : [ :: std :: os :: raw :: c_int ; 12usize ] , pub _tid : __pid_t , pub _sigev_thread : sigevent__bindgen_ty_1__bindgen_ty_1 , _bindgen_union_align : [ u64 ; 6usize ] , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct sigevent__bindgen_ty_1__bindgen_ty_1 { pub _function : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : __sigval_t ) > , pub _attribute : * mut pthread_attr_t , } # [ test ] fn bindgen_test_layout_sigevent__bindgen_ty_1__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sigevent__bindgen_ty_1__bindgen_ty_1 > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( sigevent__bindgen_ty_1__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sigevent__bindgen_ty_1__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( sigevent__bindgen_ty_1__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigevent__bindgen_ty_1__bindgen_ty_1 > ( ) ) ) . _function as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( sigevent__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! ( _function ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigevent__bindgen_ty_1__bindgen_ty_1 > ( ) ) ) . _attribute as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( sigevent__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! ( _attribute ) ) ) ; } # [ test ] fn bindgen_test_layout_sigevent__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sigevent__bindgen_ty_1 > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( sigevent__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sigevent__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( sigevent__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigevent__bindgen_ty_1 > ( ) ) ) . _pad as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( sigevent__bindgen_ty_1 ) , "::" , stringify ! ( _pad ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigevent__bindgen_ty_1 > ( ) ) ) . _tid as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( sigevent__bindgen_ty_1 ) , "::" , stringify ! ( _tid ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigevent__bindgen_ty_1 > ( ) ) ) . _sigev_thread as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( sigevent__bindgen_ty_1 ) , "::" , stringify ! ( _sigev_thread ) ) ) ; } # [ test ] fn bindgen_test_layout_sigevent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sigevent > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( sigevent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sigevent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( sigevent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigevent > ( ) ) ) . sigev_value as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( sigevent ) , "::" , stringify ! ( sigev_value ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigevent > ( ) ) ) . sigev_signo as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( sigevent ) , "::" , stringify ! ( sigev_signo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigevent > ( ) ) ) . sigev_notify as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( sigevent ) , "::" , stringify ! ( sigev_notify ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigevent > ( ) ) ) . _sigev_un as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( sigevent ) , "::" , stringify ! ( _sigev_un ) ) ) ; } pub type sigevent_t = sigevent ; pub const SIGEV_SIGNAL : _bindgen_ty_8 = 0 ; pub const SIGEV_NONE : _bindgen_ty_8 = 1 ; pub const SIGEV_THREAD : _bindgen_ty_8 = 2 ; pub const SIGEV_THREAD_ID : _bindgen_ty_8 = 4 ; pub type _bindgen_ty_8 = u32 ; pub type __sighandler_t = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : :: std :: os :: raw :: c_int ) > ; extern "C" { pub fn __sysv_signal ( __sig : :: std :: os :: raw :: c_int , __handler : __sighandler_t ) -> __sighandler_t ; } extern "C" { pub fn signal ( __sig : :: std :: os :: raw :: c_int , __handler : __sighandler_t ) -> __sighandler_t ; } extern "C" { pub fn kill ( __pid : __pid_t , __sig : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn killpg ( __pgrp : __pid_t , __sig : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn raise ( __sig : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ssignal ( __sig : :: std :: os :: raw :: c_int , __handler : __sighandler_t ) -> __sighandler_t ; } extern "C" { pub fn gsignal ( __sig : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn psignal ( __sig : :: std :: os :: raw :: c_int , __s : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn psiginfo ( __pinfo : * const siginfo_t , __s : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn sigblock ( __mask : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sigsetmask ( __mask : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn siggetmask ( ) -> :: std :: os :: raw :: c_int ; } pub type sig_t = __sighandler_t ; extern "C" { pub fn sigemptyset ( __set : * mut sigset_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sigfillset ( __set : * mut sigset_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sigaddset ( __set : * mut sigset_t , __signo : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sigdelset ( __set : * mut sigset_t , __signo : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sigismember ( __set : * const sigset_t , __signo : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct sigaction { pub __sigaction_handler : sigaction__bindgen_ty_1 , pub sa_mask : __sigset_t , pub sa_flags : :: std :: os :: raw :: c_int , pub sa_restorer : :: std :: option :: Option < unsafe extern "C" fn ( ) > , } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union sigaction__bindgen_ty_1 { pub sa_handler : __sighandler_t , pub sa_sigaction : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut siginfo_t , arg3 : * mut :: std :: os :: raw :: c_void ) > , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout_sigaction__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sigaction__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( sigaction__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sigaction__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( sigaction__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigaction__bindgen_ty_1 > ( ) ) ) . sa_handler as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( sigaction__bindgen_ty_1 ) , "::" , stringify ! ( sa_handler ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigaction__bindgen_ty_1 > ( ) ) ) . sa_sigaction as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( sigaction__bindgen_ty_1 ) , "::" , stringify ! ( sa_sigaction ) ) ) ; } # [ test ] fn bindgen_test_layout_sigaction ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sigaction > ( ) , 152usize , concat ! ( "Size of: " , stringify ! ( sigaction ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sigaction > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( sigaction ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigaction > ( ) ) ) . __sigaction_handler as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( sigaction ) , "::" , stringify ! ( __sigaction_handler ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigaction > ( ) ) ) . sa_mask as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( sigaction ) , "::" , stringify ! ( sa_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigaction > ( ) ) ) . sa_flags as * const _ as usize } , 136usize , concat ! ( "Offset of field: " , stringify ! ( sigaction ) , "::" , stringify ! ( sa_flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigaction > ( ) ) ) . sa_restorer as * const _ as usize } , 144usize , concat ! ( "Offset of field: " , stringify ! ( sigaction ) , "::" , stringify ! ( sa_restorer ) ) ) ; } extern "C" { pub fn sigprocmask ( __how : :: std :: os :: raw :: c_int , __set : * const sigset_t , __oset : * mut sigset_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sigsuspend ( __set : * const sigset_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sigaction ( __sig : :: std :: os :: raw :: c_int , __act : * const sigaction , __oact : * mut sigaction ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sigpending ( __set : * mut sigset_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sigwait ( __set : * const sigset_t , __sig : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sigwaitinfo ( __set : * const sigset_t , __info : * mut siginfo_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sigtimedwait ( __set : * const sigset_t , __info : * mut siginfo_t , __timeout : * const timespec ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sigqueue ( __pid : __pid_t , __sig : :: std :: os :: raw :: c_int , __val : sigval ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_sys_siglist" ] pub static mut _sys_siglist : [ * const :: std :: os :: raw :: c_char ; 65usize ] ; } extern "C" { # [ link_name = "\u{1}sys_siglist" ] pub static mut sys_siglist : [ * const :: std :: os :: raw :: c_char ; 65usize ] ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _fpx_sw_bytes { pub magic1 : __uint32_t , pub extended_size : __uint32_t , pub xstate_bv : __uint64_t , pub xstate_size : __uint32_t , pub __glibc_reserved1 : [ __uint32_t ; 7usize ] , } # [ test ] fn bindgen_test_layout__fpx_sw_bytes ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _fpx_sw_bytes > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( _fpx_sw_bytes ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _fpx_sw_bytes > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _fpx_sw_bytes ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _fpx_sw_bytes > ( ) ) ) . magic1 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _fpx_sw_bytes ) , "::" , stringify ! ( magic1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _fpx_sw_bytes > ( ) ) ) . extended_size as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( _fpx_sw_bytes ) , "::" , stringify ! ( extended_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _fpx_sw_bytes > ( ) ) ) . xstate_bv as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _fpx_sw_bytes ) , "::" , stringify ! ( xstate_bv ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _fpx_sw_bytes > ( ) ) ) . xstate_size as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _fpx_sw_bytes ) , "::" , stringify ! ( xstate_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _fpx_sw_bytes > ( ) ) ) . __glibc_reserved1 as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( _fpx_sw_bytes ) , "::" , stringify ! ( __glibc_reserved1 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _fpreg { pub significand : [ :: std :: os :: raw :: c_ushort ; 4usize ] , pub exponent : :: std :: os :: raw :: c_ushort , } # [ test ] fn bindgen_test_layout__fpreg ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _fpreg > ( ) , 10usize , concat ! ( "Size of: " , stringify ! ( _fpreg ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _fpreg > ( ) , 2usize , concat ! ( "Alignment of " , stringify ! ( _fpreg ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _fpreg > ( ) ) ) . significand as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _fpreg ) , "::" , stringify ! ( significand ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _fpreg > ( ) ) ) . exponent as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _fpreg ) , "::" , stringify ! ( exponent ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _fpxreg { pub significand : [ :: std :: os :: raw :: c_ushort ; 4usize ] , pub exponent : :: std :: os :: raw :: c_ushort , pub __glibc_reserved1 : [ :: std :: os :: raw :: c_ushort ; 3usize ] , } # [ test ] fn bindgen_test_layout__fpxreg ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _fpxreg > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _fpxreg ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _fpxreg > ( ) , 2usize , concat ! ( "Alignment of " , stringify ! ( _fpxreg ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _fpxreg > ( ) ) ) . significand as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _fpxreg ) , "::" , stringify ! ( significand ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _fpxreg > ( ) ) ) . exponent as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _fpxreg ) , "::" , stringify ! ( exponent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _fpxreg > ( ) ) ) . __glibc_reserved1 as * const _ as usize } , 10usize , concat ! ( "Offset of field: " , stringify ! ( _fpxreg ) , "::" , stringify ! ( __glibc_reserved1 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _xmmreg { pub element : [ __uint32_t ; 4usize ] , } # [ test ] fn bindgen_test_layout__xmmreg ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _xmmreg > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _xmmreg ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _xmmreg > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _xmmreg ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _xmmreg > ( ) ) ) . element as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _xmmreg ) , "::" , stringify ! ( element ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _fpstate { pub cwd : __uint16_t , pub swd : __uint16_t , pub ftw : __uint16_t , pub fop : __uint16_t , pub rip : __uint64_t , pub rdp : __uint64_t , pub mxcsr : __uint32_t , pub mxcr_mask : __uint32_t , pub _st : [ _fpxreg ; 8usize ] , pub _xmm : [ _xmmreg ; 16usize ] , pub __glibc_reserved1 : [ __uint32_t ; 24usize ] , } # [ test ] fn bindgen_test_layout__fpstate ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _fpstate > ( ) , 512usize , concat ! ( "Size of: " , stringify ! ( _fpstate ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _fpstate > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _fpstate ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _fpstate > ( ) ) ) . cwd as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _fpstate ) , "::" , stringify ! ( cwd ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _fpstate > ( ) ) ) . swd as * const _ as usize } , 2usize , concat ! ( "Offset of field: " , stringify ! ( _fpstate ) , "::" , stringify ! ( swd ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _fpstate > ( ) ) ) . ftw as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( _fpstate ) , "::" , stringify ! ( ftw ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _fpstate > ( ) ) ) . fop as * const _ as usize } , 6usize , concat ! ( "Offset of field: " , stringify ! ( _fpstate ) , "::" , stringify ! ( fop ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _fpstate > ( ) ) ) . rip as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _fpstate ) , "::" , stringify ! ( rip ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _fpstate > ( ) ) ) . rdp as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _fpstate ) , "::" , stringify ! ( rdp ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _fpstate > ( ) ) ) . mxcsr as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( _fpstate ) , "::" , stringify ! ( mxcsr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _fpstate > ( ) ) ) . mxcr_mask as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( _fpstate ) , "::" , stringify ! ( mxcr_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _fpstate > ( ) ) ) . _st as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( _fpstate ) , "::" , stringify ! ( _st ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _fpstate > ( ) ) ) . _xmm as * const _ as usize } , 160usize , concat ! ( "Offset of field: " , stringify ! ( _fpstate ) , "::" , stringify ! ( _xmm ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _fpstate > ( ) ) ) . __glibc_reserved1 as * const _ as usize } , 416usize , concat ! ( "Offset of field: " , stringify ! ( _fpstate ) , "::" , stringify ! ( __glibc_reserved1 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct sigcontext { pub r8 : __uint64_t , pub r9 : __uint64_t , pub r10 : __uint64_t , pub r11 : __uint64_t , pub r12 : __uint64_t , pub r13 : __uint64_t , pub r14 : __uint64_t , pub r15 : __uint64_t , pub rdi : __uint64_t , pub rsi : __uint64_t , pub rbp : __uint64_t , pub rbx : __uint64_t , pub rdx : __uint64_t , pub rax : __uint64_t , pub rcx : __uint64_t , pub rsp : __uint64_t , pub rip : __uint64_t , pub eflags : __uint64_t , pub cs : :: std :: os :: raw :: c_ushort , pub gs : :: std :: os :: raw :: c_ushort , pub fs : :: std :: os :: raw :: c_ushort , pub __pad0 : :: std :: os :: raw :: c_ushort , pub err : __uint64_t , pub trapno : __uint64_t , pub oldmask : __uint64_t , pub cr2 : __uint64_t , pub __bindgen_anon_1 : sigcontext__bindgen_ty_1 , pub __reserved1 : [ __uint64_t ; 8usize ] , } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union sigcontext__bindgen_ty_1 { pub fpstate : * mut _fpstate , pub __fpstate_word : __uint64_t , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout_sigcontext__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sigcontext__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( sigcontext__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sigcontext__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( sigcontext__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext__bindgen_ty_1 > ( ) ) ) . fpstate as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext__bindgen_ty_1 ) , "::" , stringify ! ( fpstate ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext__bindgen_ty_1 > ( ) ) ) . __fpstate_word as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext__bindgen_ty_1 ) , "::" , stringify ! ( __fpstate_word ) ) ) ; } # [ test ] fn bindgen_test_layout_sigcontext ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sigcontext > ( ) , 256usize , concat ! ( "Size of: " , stringify ! ( sigcontext ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sigcontext > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( sigcontext ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . r8 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( r8 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . r9 as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( r9 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . r10 as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( r10 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . r11 as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( r11 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . r12 as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( r12 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . r13 as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( r13 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . r14 as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( r14 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . r15 as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( r15 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . rdi as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( rdi ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . rsi as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( rsi ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . rbp as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( rbp ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . rbx as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( rbx ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . rdx as * const _ as usize } , 96usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( rdx ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . rax as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( rax ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . rcx as * const _ as usize } , 112usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( rcx ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . rsp as * const _ as usize } , 120usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( rsp ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . rip as * const _ as usize } , 128usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( rip ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . eflags as * const _ as usize } , 136usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( eflags ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . cs as * const _ as usize } , 144usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( cs ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . gs as * const _ as usize } , 146usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( gs ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . fs as * const _ as usize } , 148usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( fs ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . __pad0 as * const _ as usize } , 150usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( __pad0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . err as * const _ as usize } , 152usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( err ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . trapno as * const _ as usize } , 160usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( trapno ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . oldmask as * const _ as usize } , 168usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( oldmask ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . cr2 as * const _ as usize } , 176usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( cr2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigcontext > ( ) ) ) . __reserved1 as * const _ as usize } , 192usize , concat ! ( "Offset of field: " , stringify ! ( sigcontext ) , "::" , stringify ! ( __reserved1 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _xsave_hdr { pub xstate_bv : __uint64_t , pub __glibc_reserved1 : [ __uint64_t ; 2usize ] , pub __glibc_reserved2 : [ __uint64_t ; 5usize ] , } # [ test ] fn bindgen_test_layout__xsave_hdr ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _xsave_hdr > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( _xsave_hdr ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _xsave_hdr > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _xsave_hdr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _xsave_hdr > ( ) ) ) . xstate_bv as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _xsave_hdr ) , "::" , stringify ! ( xstate_bv ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _xsave_hdr > ( ) ) ) . __glibc_reserved1 as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _xsave_hdr ) , "::" , stringify ! ( __glibc_reserved1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _xsave_hdr > ( ) ) ) . __glibc_reserved2 as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( _xsave_hdr ) , "::" , stringify ! ( __glibc_reserved2 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _ymmh_state { pub ymmh_space : [ __uint32_t ; 64usize ] , } # [ test ] fn bindgen_test_layout__ymmh_state ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _ymmh_state > ( ) , 256usize , concat ! ( "Size of: " , stringify ! ( _ymmh_state ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _ymmh_state > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _ymmh_state ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _ymmh_state > ( ) ) ) . ymmh_space as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _ymmh_state ) , "::" , stringify ! ( ymmh_space ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _xstate { pub fpstate : _fpstate , pub xstate_hdr : _xsave_hdr , pub ymmh : _ymmh_state , } # [ test ] fn bindgen_test_layout__xstate ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _xstate > ( ) , 832usize , concat ! ( "Size of: " , stringify ! ( _xstate ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _xstate > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _xstate ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _xstate > ( ) ) ) . fpstate as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _xstate ) , "::" , stringify ! ( fpstate ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _xstate > ( ) ) ) . xstate_hdr as * const _ as usize } , 512usize , concat ! ( "Offset of field: " , stringify ! ( _xstate ) , "::" , stringify ! ( xstate_hdr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _xstate > ( ) ) ) . ymmh as * const _ as usize } , 576usize , concat ! ( "Offset of field: " , stringify ! ( _xstate ) , "::" , stringify ! ( ymmh ) ) ) ; } extern "C" { pub fn sigreturn ( __scp : * mut sigcontext ) -> :: std :: os :: raw :: c_int ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct stack_t { pub ss_sp : * mut :: std :: os :: raw :: c_void , pub ss_flags : :: std :: os :: raw :: c_int , pub ss_size : usize , } # [ test ] fn bindgen_test_layout_stack_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < stack_t > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( stack_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < stack_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( stack_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < stack_t > ( ) ) ) . ss_sp as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( stack_t ) , "::" , stringify ! ( ss_sp ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < stack_t > ( ) ) ) . ss_flags as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( stack_t ) , "::" , stringify ! ( ss_flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < stack_t > ( ) ) ) . ss_size as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( stack_t ) , "::" , stringify ! ( ss_size ) ) ) ; } pub type greg_t = :: std :: os :: raw :: c_longlong ; pub type gregset_t = [ greg_t ; 23usize ] ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _libc_fpxreg { pub significand : [ :: std :: os :: raw :: c_ushort ; 4usize ] , pub exponent : :: std :: os :: raw :: c_ushort , pub __glibc_reserved1 : [ :: std :: os :: raw :: c_ushort ; 3usize ] , } # [ test ] fn bindgen_test_layout__libc_fpxreg ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _libc_fpxreg > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _libc_fpxreg ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _libc_fpxreg > ( ) , 2usize , concat ! ( "Alignment of " , stringify ! ( _libc_fpxreg ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _libc_fpxreg > ( ) ) ) . significand as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _libc_fpxreg ) , "::" , stringify ! ( significand ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _libc_fpxreg > ( ) ) ) . exponent as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _libc_fpxreg ) , "::" , stringify ! ( exponent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _libc_fpxreg > ( ) ) ) . __glibc_reserved1 as * const _ as usize } , 10usize , concat ! ( "Offset of field: " , stringify ! ( _libc_fpxreg ) , "::" , stringify ! ( __glibc_reserved1 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _libc_xmmreg { pub element : [ __uint32_t ; 4usize ] , } # [ test ] fn bindgen_test_layout__libc_xmmreg ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _libc_xmmreg > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _libc_xmmreg ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _libc_xmmreg > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _libc_xmmreg ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _libc_xmmreg > ( ) ) ) . element as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _libc_xmmreg ) , "::" , stringify ! ( element ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _libc_fpstate { pub cwd : __uint16_t , pub swd : __uint16_t , pub ftw : __uint16_t , pub fop : __uint16_t , pub rip : __uint64_t , pub rdp : __uint64_t , pub mxcsr : __uint32_t , pub mxcr_mask : __uint32_t , pub _st : [ _libc_fpxreg ; 8usize ] , pub _xmm : [ _libc_xmmreg ; 16usize ] , pub __glibc_reserved1 : [ __uint32_t ; 24usize ] , } # [ test ] fn bindgen_test_layout__libc_fpstate ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _libc_fpstate > ( ) , 512usize , concat ! ( "Size of: " , stringify ! ( _libc_fpstate ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _libc_fpstate > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _libc_fpstate ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _libc_fpstate > ( ) ) ) . cwd as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _libc_fpstate ) , "::" , stringify ! ( cwd ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _libc_fpstate > ( ) ) ) . swd as * const _ as usize } , 2usize , concat ! ( "Offset of field: " , stringify ! ( _libc_fpstate ) , "::" , stringify ! ( swd ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _libc_fpstate > ( ) ) ) . ftw as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( _libc_fpstate ) , "::" , stringify ! ( ftw ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _libc_fpstate > ( ) ) ) . fop as * const _ as usize } , 6usize , concat ! ( "Offset of field: " , stringify ! ( _libc_fpstate ) , "::" , stringify ! ( fop ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _libc_fpstate > ( ) ) ) . rip as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _libc_fpstate ) , "::" , stringify ! ( rip ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _libc_fpstate > ( ) ) ) . rdp as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _libc_fpstate ) , "::" , stringify ! ( rdp ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _libc_fpstate > ( ) ) ) . mxcsr as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( _libc_fpstate ) , "::" , stringify ! ( mxcsr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _libc_fpstate > ( ) ) ) . mxcr_mask as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( _libc_fpstate ) , "::" , stringify ! ( mxcr_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _libc_fpstate > ( ) ) ) . _st as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( _libc_fpstate ) , "::" , stringify ! ( _st ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _libc_fpstate > ( ) ) ) . _xmm as * const _ as usize } , 160usize , concat ! ( "Offset of field: " , stringify ! ( _libc_fpstate ) , "::" , stringify ! ( _xmm ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _libc_fpstate > ( ) ) ) . __glibc_reserved1 as * const _ as usize } , 416usize , concat ! ( "Offset of field: " , stringify ! ( _libc_fpstate ) , "::" , stringify ! ( __glibc_reserved1 ) ) ) ; } pub type fpregset_t = * mut _libc_fpstate ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct mcontext_t { pub gregs : gregset_t , pub fpregs : fpregset_t , pub __reserved1 : [ :: std :: os :: raw :: c_ulonglong ; 8usize ] , } # [ test ] fn bindgen_test_layout_mcontext_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < mcontext_t > ( ) , 256usize , concat ! ( "Size of: " , stringify ! ( mcontext_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < mcontext_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( mcontext_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < mcontext_t > ( ) ) ) . gregs as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( mcontext_t ) , "::" , stringify ! ( gregs ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < mcontext_t > ( ) ) ) . fpregs as * const _ as usize } , 184usize , concat ! ( "Offset of field: " , stringify ! ( mcontext_t ) , "::" , stringify ! ( fpregs ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < mcontext_t > ( ) ) ) . __reserved1 as * const _ as usize } , 192usize , concat ! ( "Offset of field: " , stringify ! ( mcontext_t ) , "::" , stringify ! ( __reserved1 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ucontext_t { pub uc_flags : :: std :: os :: raw :: c_ulong , pub uc_link : * mut ucontext_t , pub uc_stack : stack_t , pub uc_mcontext : mcontext_t , pub uc_sigmask : sigset_t , pub __fpregs_mem : _libc_fpstate , pub __ssp : [ :: std :: os :: raw :: c_ulonglong ; 4usize ] , } # [ test ] fn bindgen_test_layout_ucontext_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ucontext_t > ( ) , 968usize , concat ! ( "Size of: " , stringify ! ( ucontext_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ucontext_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ucontext_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ucontext_t > ( ) ) ) . uc_flags as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ucontext_t ) , "::" , stringify ! ( uc_flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ucontext_t > ( ) ) ) . uc_link as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ucontext_t ) , "::" , stringify ! ( uc_link ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ucontext_t > ( ) ) ) . uc_stack as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( ucontext_t ) , "::" , stringify ! ( uc_stack ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ucontext_t > ( ) ) ) . uc_mcontext as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( ucontext_t ) , "::" , stringify ! ( uc_mcontext ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ucontext_t > ( ) ) ) . uc_sigmask as * const _ as usize } , 296usize , concat ! ( "Offset of field: " , stringify ! ( ucontext_t ) , "::" , stringify ! ( uc_sigmask ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ucontext_t > ( ) ) ) . __fpregs_mem as * const _ as usize } , 424usize , concat ! ( "Offset of field: " , stringify ! ( ucontext_t ) , "::" , stringify ! ( __fpregs_mem ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ucontext_t > ( ) ) ) . __ssp as * const _ as usize } , 936usize , concat ! ( "Offset of field: " , stringify ! ( ucontext_t ) , "::" , stringify ! ( __ssp ) ) ) ; } extern "C" { pub fn siginterrupt ( __sig : :: std :: os :: raw :: c_int , __interrupt : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } pub const SS_ONSTACK : _bindgen_ty_9 = 1 ; pub const SS_DISABLE : _bindgen_ty_9 = 2 ; pub type _bindgen_ty_9 = u32 ; extern "C" { pub fn sigaltstack ( __ss : * const stack_t , __oss : * mut stack_t ) -> :: std :: os :: raw :: c_int ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct sigstack { pub ss_sp : * mut :: std :: os :: raw :: c_void , pub ss_onstack : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_sigstack ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sigstack > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( sigstack ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sigstack > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( sigstack ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigstack > ( ) ) ) . ss_sp as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( sigstack ) , "::" , stringify ! ( ss_sp ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigstack > ( ) ) ) . ss_onstack as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( sigstack ) , "::" , stringify ! ( ss_onstack ) ) ) ; } extern "C" { pub fn sigstack ( __ss : * mut sigstack , __oss : * mut sigstack ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_sigmask ( __how : :: std :: os :: raw :: c_int , __newmask : * const __sigset_t , __oldmask : * mut __sigset_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_kill ( __threadid : pthread_t , __signo : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __libc_current_sigrtmin ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __libc_current_sigrtmax ( ) -> :: std :: os :: raw :: c_int ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct timezone { pub tz_minuteswest : :: std :: os :: raw :: c_int , pub tz_dsttime : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_timezone ( ) { assert_eq ! ( :: std :: mem :: size_of :: < timezone > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( timezone ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < timezone > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( timezone ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < timezone > ( ) ) ) . tz_minuteswest as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( timezone ) , "::" , stringify ! ( tz_minuteswest ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < timezone > ( ) ) ) . tz_dsttime as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( timezone ) , "::" , stringify ! ( tz_dsttime ) ) ) ; } pub type __timezone_ptr_t = * mut timezone ; extern "C" { pub fn gettimeofday ( __tv : * mut timeval , __tz : __timezone_ptr_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn settimeofday ( __tv : * const timeval , __tz : * const timezone ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn adjtime ( __delta : * const timeval , __olddelta : * mut timeval ) -> :: std :: os :: raw :: c_int ; } pub const __itimer_which_ITIMER_REAL : __itimer_which = 0 ; pub const __itimer_which_ITIMER_VIRTUAL : __itimer_which = 1 ; pub const __itimer_which_ITIMER_PROF : __itimer_which = 2 ; pub type __itimer_which = u32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct itimerval { pub it_interval : timeval , pub it_value : timeval , } # [ test ] fn bindgen_test_layout_itimerval ( ) { assert_eq ! ( :: std :: mem :: size_of :: < itimerval > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( itimerval ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < itimerval > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( itimerval ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < itimerval > ( ) ) ) . it_interval as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( itimerval ) , "::" , stringify ! ( it_interval ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < itimerval > ( ) ) ) . it_value as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( itimerval ) , "::" , stringify ! ( it_value ) ) ) ; } pub type __itimer_which_t = :: std :: os :: raw :: c_int ; extern "C" { pub fn getitimer ( __which : __itimer_which_t , __value : * mut itimerval ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setitimer ( __which : __itimer_which_t , __new : * const itimerval , __old : * mut itimerval ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn utimes ( __file : * const :: std :: os :: raw :: c_char , __tvp : * const timeval ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn lutimes ( __file : * const :: std :: os :: raw :: c_char , __tvp : * const timeval ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn futimes ( __fd : :: std :: os :: raw :: c_int , __tvp : * const timeval ) -> :: std :: os :: raw :: c_int ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct tm { pub tm_sec : :: std :: os :: raw :: c_int , pub tm_min : :: std :: os :: raw :: c_int , pub tm_hour : :: std :: os :: raw :: c_int , pub tm_mday : :: std :: os :: raw :: c_int , pub tm_mon : :: std :: os :: raw :: c_int , pub tm_year : :: std :: os :: raw :: c_int , pub tm_wday : :: std :: os :: raw :: c_int , pub tm_yday : :: std :: os :: raw :: c_int , pub tm_isdst : :: std :: os :: raw :: c_int , pub tm_gmtoff : :: std :: os :: raw :: c_long , pub tm_zone : * const :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_tm ( ) { assert_eq ! ( :: std :: mem :: size_of :: < tm > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( tm ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < tm > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( tm ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < tm > ( ) ) ) . tm_sec as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_sec ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < tm > ( ) ) ) . tm_min as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_min ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < tm > ( ) ) ) . tm_hour as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_hour ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < tm > ( ) ) ) . tm_mday as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_mday ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < tm > ( ) ) ) . tm_mon as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_mon ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < tm > ( ) ) ) . tm_year as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_year ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < tm > ( ) ) ) . tm_wday as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_wday ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < tm > ( ) ) ) . tm_yday as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_yday ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < tm > ( ) ) ) . tm_isdst as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_isdst ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < tm > ( ) ) ) . tm_gmtoff as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_gmtoff ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < tm > ( ) ) ) . tm_zone as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_zone ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct itimerspec { pub it_interval : timespec , pub it_value : timespec , } # [ test ] fn bindgen_test_layout_itimerspec ( ) { assert_eq ! ( :: std :: mem :: size_of :: < itimerspec > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( itimerspec ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < itimerspec > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( itimerspec ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < itimerspec > ( ) ) ) . it_interval as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( itimerspec ) , "::" , stringify ! ( it_interval ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < itimerspec > ( ) ) ) . it_value as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( itimerspec ) , "::" , stringify ! ( it_value ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __locale_struct { pub __locales : [ * mut __locale_data ; 13usize ] , pub __ctype_b : * const :: std :: os :: raw :: c_ushort , pub __ctype_tolower : * const :: std :: os :: raw :: c_int , pub __ctype_toupper : * const :: std :: os :: raw :: c_int , pub __names : [ * const :: std :: os :: raw :: c_char ; 13usize ] , } # [ test ] fn bindgen_test_layout___locale_struct ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __locale_struct > ( ) , 232usize , concat ! ( "Size of: " , stringify ! ( __locale_struct ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __locale_struct > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __locale_struct ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __locale_struct > ( ) ) ) . __locales as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __locale_struct ) , "::" , stringify ! ( __locales ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __locale_struct > ( ) ) ) . __ctype_b as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( __locale_struct ) , "::" , stringify ! ( __ctype_b ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __locale_struct > ( ) ) ) . __ctype_tolower as * const _ as usize } , 112usize , concat ! ( "Offset of field: " , stringify ! ( __locale_struct ) , "::" , stringify ! ( __ctype_tolower ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __locale_struct > ( ) ) ) . __ctype_toupper as * const _ as usize } , 120usize , concat ! ( "Offset of field: " , stringify ! ( __locale_struct ) , "::" , stringify ! ( __ctype_toupper ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __locale_struct > ( ) ) ) . __names as * const _ as usize } , 128usize , concat ! ( "Offset of field: " , stringify ! ( __locale_struct ) , "::" , stringify ! ( __names ) ) ) ; } pub type __locale_t = * mut __locale_struct ; pub type locale_t = __locale_t ; extern "C" { pub fn clock ( ) -> clock_t ; } extern "C" { pub fn time ( __timer : * mut time_t ) -> time_t ; } extern "C" { pub fn difftime ( __time1 : time_t , __time0 : time_t ) -> f64 ; } extern "C" { pub fn mktime ( __tp : * mut tm ) -> time_t ; } extern "C" { pub fn strftime ( __s : * mut :: std :: os :: raw :: c_char , __maxsize : usize , __format : * const :: std :: os :: raw :: c_char , __tp : * const tm ) -> usize ; } extern "C" { pub fn strftime_l ( __s : * mut :: std :: os :: raw :: c_char , __maxsize : usize , __format : * const :: std :: os :: raw :: c_char , __tp : * const tm , __loc : locale_t ) -> usize ; } extern "C" { pub fn gmtime ( __timer : * const time_t ) -> * mut tm ; } extern "C" { pub fn localtime ( __timer : * const time_t ) -> * mut tm ; } extern "C" { pub fn gmtime_r ( __timer : * const time_t , __tp : * mut tm ) -> * mut tm ; } extern "C" { pub fn localtime_r ( __timer : * const time_t , __tp : * mut tm ) -> * mut tm ; } extern "C" { pub fn asctime ( __tp : * const tm ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn ctime ( __timer : * const time_t ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn asctime_r ( __tp : * const tm , __buf : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn ctime_r ( __timer : * const time_t , __buf : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { # [ link_name = "\u{1}__tzname" ] pub static mut __tzname : [ * mut :: std :: os :: raw :: c_char ; 2usize ] ; } extern "C" { # [ link_name = "\u{1}__daylight" ] pub static mut __daylight : :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}__timezone" ] pub static mut __timezone : :: std :: os :: raw :: c_long ; } extern "C" { # [ link_name = "\u{1}tzname" ] pub static mut tzname : [ * mut :: std :: os :: raw :: c_char ; 2usize ] ; } extern "C" { pub fn tzset ( ) ; } extern "C" { # [ link_name = "\u{1}daylight" ] pub static mut daylight : :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}timezone" ] pub static mut timezone : :: std :: os :: raw :: c_long ; } extern "C" { pub fn stime ( __when : * const time_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn timegm ( __tp : * mut tm ) -> time_t ; } extern "C" { pub fn timelocal ( __tp : * mut tm ) -> time_t ; } extern "C" { pub fn dysize ( __year : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn nanosleep ( __requested_time : * const timespec , __remaining : * mut timespec ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn clock_getres ( __clock_id : clockid_t , __res : * mut timespec ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn clock_gettime ( __clock_id : clockid_t , __tp : * mut timespec ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn clock_settime ( __clock_id : clockid_t , __tp : * const timespec ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn clock_nanosleep ( __clock_id : clockid_t , __flags : :: std :: os :: raw :: c_int , __req : * const timespec , __rem : * mut timespec ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn clock_getcpuclockid ( __pid : pid_t , __clock_id : * mut clockid_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn timer_create ( __clock_id : clockid_t , __evp : * mut sigevent , __timerid : * mut timer_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn timer_delete ( __timerid : timer_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn timer_settime ( __timerid : timer_t , __flags : :: std :: os :: raw :: c_int , __value : * const itimerspec , __ovalue : * mut itimerspec ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn timer_gettime ( __timerid : timer_t , __value : * mut itimerspec ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn timer_getoverrun ( __timerid : timer_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn timespec_get ( __ts : * mut timespec , __base : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } pub type va_list = __builtin_va_list ; pub type __gnuc_va_list = __builtin_va_list ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct __mbstate_t { pub __count : :: std :: os :: raw :: c_int , pub __value : __mbstate_t__bindgen_ty_1 , } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union __mbstate_t__bindgen_ty_1 { pub __wch : :: std :: os :: raw :: c_uint , pub __wchb : [ :: std :: os :: raw :: c_char ; 4usize ] , _bindgen_union_align : u32 , } # [ test ] fn bindgen_test_layout___mbstate_t__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __mbstate_t__bindgen_ty_1 > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( __mbstate_t__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __mbstate_t__bindgen_ty_1 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __mbstate_t__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __mbstate_t__bindgen_ty_1 > ( ) ) ) . __wch as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __mbstate_t__bindgen_ty_1 ) , "::" , stringify ! ( __wch ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __mbstate_t__bindgen_ty_1 > ( ) ) ) . __wchb as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __mbstate_t__bindgen_ty_1 ) , "::" , stringify ! ( __wchb ) ) ) ; } # [ test ] fn bindgen_test_layout___mbstate_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __mbstate_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __mbstate_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __mbstate_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __mbstate_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __mbstate_t > ( ) ) ) . __count as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __mbstate_t ) , "::" , stringify ! ( __count ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __mbstate_t > ( ) ) ) . __value as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( __mbstate_t ) , "::" , stringify ! ( __value ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _G_fpos_t { pub __pos : __off_t , pub __state : __mbstate_t , } # [ test ] fn bindgen_test_layout__G_fpos_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _G_fpos_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _G_fpos_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _G_fpos_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _G_fpos_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _G_fpos_t > ( ) ) ) . __pos as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _G_fpos_t ) , "::" , stringify ! ( __pos ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _G_fpos_t > ( ) ) ) . __state as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _G_fpos_t ) , "::" , stringify ! ( __state ) ) ) ; } pub type __fpos_t = _G_fpos_t ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _G_fpos64_t { pub __pos : __off64_t , pub __state : __mbstate_t , } # [ test ] fn bindgen_test_layout__G_fpos64_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _G_fpos64_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _G_fpos64_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _G_fpos64_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _G_fpos64_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _G_fpos64_t > ( ) ) ) . __pos as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _G_fpos64_t ) , "::" , stringify ! ( __pos ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _G_fpos64_t > ( ) ) ) . __state as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _G_fpos64_t ) , "::" , stringify ! ( __state ) ) ) ; } pub type __fpos64_t = _G_fpos64_t ; pub type __FILE = _IO_FILE ; pub type FILE = _IO_FILE ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _IO_marker { _unused : [ u8 ; 0 ] , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _IO_codecvt { _unused : [ u8 ; 0 ] , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _IO_wide_data { _unused : [ u8 ; 0 ] , } pub type _IO_lock_t = :: std :: os :: raw :: c_void ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _IO_FILE { pub _flags : :: std :: os :: raw :: c_int , pub _IO_read_ptr : * mut :: std :: os :: raw :: c_char , pub _IO_read_end : * mut :: std :: os :: raw :: c_char , pub _IO_read_base : * mut :: std :: os :: raw :: c_char , pub _IO_write_base : * mut :: std :: os :: raw :: c_char , pub _IO_write_ptr : * mut :: std :: os :: raw :: c_char , pub _IO_write_end : * mut :: std :: os :: raw :: c_char , pub _IO_buf_base : * mut :: std :: os :: raw :: c_char , pub _IO_buf_end : * mut :: std :: os :: raw :: c_char , pub _IO_save_base : * mut :: std :: os :: raw :: c_char , pub _IO_backup_base : * mut :: std :: os :: raw :: c_char , pub _IO_save_end : * mut :: std :: os :: raw :: c_char , pub _markers : * mut _IO_marker , pub _chain : * mut _IO_FILE , pub _fileno : :: std :: os :: raw :: c_int , pub _flags2 : :: std :: os :: raw :: c_int , pub _old_offset : __off_t , pub _cur_column : :: std :: os :: raw :: c_ushort , pub _vtable_offset : :: std :: os :: raw :: c_schar , pub _shortbuf : [ :: std :: os :: raw :: c_char ; 1usize ] , pub _lock : * mut _IO_lock_t , pub _offset : __off64_t , pub _codecvt : * mut _IO_codecvt , pub _wide_data : * mut _IO_wide_data , pub _freeres_list : * mut _IO_FILE , pub _freeres_buf : * mut :: std :: os :: raw :: c_void , pub __pad5 : usize , pub _mode : :: std :: os :: raw :: c_int , pub _unused2 : [ :: std :: os :: raw :: c_char ; 20usize ] , } # [ test ] fn bindgen_test_layout__IO_FILE ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _IO_FILE > ( ) , 216usize , concat ! ( "Size of: " , stringify ! ( _IO_FILE ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _IO_FILE > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _IO_FILE ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _flags as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_read_ptr as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_read_ptr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_read_end as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_read_end ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_read_base as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_read_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_write_base as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_write_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_write_ptr as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_write_ptr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_write_end as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_write_end ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_buf_base as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_buf_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_buf_end as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_buf_end ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_save_base as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_save_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_backup_base as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_backup_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_save_end as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_save_end ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _markers as * const _ as usize } , 96usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _markers ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _chain as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _chain ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _fileno as * const _ as usize } , 112usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _fileno ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _flags2 as * const _ as usize } , 116usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _flags2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _old_offset as * const _ as usize } , 120usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _old_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _cur_column as * const _ as usize } , 128usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _cur_column ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _vtable_offset as * const _ as usize } , 130usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _vtable_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _shortbuf as * const _ as usize } , 131usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _shortbuf ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _lock as * const _ as usize } , 136usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _lock ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _offset as * const _ as usize } , 144usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _codecvt as * const _ as usize } , 152usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _codecvt ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _wide_data as * const _ as usize } , 160usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _wide_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _freeres_list as * const _ as usize } , 168usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _freeres_list ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _freeres_buf as * const _ as usize } , 176usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _freeres_buf ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . __pad5 as * const _ as usize } , 184usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( __pad5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _mode as * const _ as usize } , 192usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _mode ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _unused2 as * const _ as usize } , 196usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _unused2 ) ) ) ; } pub type fpos_t = __fpos_t ; extern "C" { # [ link_name = "\u{1}stdin" ] pub static mut stdin : * mut FILE ; } extern "C" { # [ link_name = "\u{1}stdout" ] pub static mut stdout : * mut FILE ; } extern "C" { # [ link_name = "\u{1}stderr" ] pub static mut stderr : * mut FILE ; } extern "C" { pub fn remove ( __filename : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn rename ( __old : * const :: std :: os :: raw :: c_char , __new : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn renameat ( __oldfd : :: std :: os :: raw :: c_int , __old : * const :: std :: os :: raw :: c_char , __newfd : :: std :: os :: raw :: c_int , __new : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn tmpfile ( ) -> * mut FILE ; } extern "C" { pub fn tmpnam ( __s : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn tmpnam_r ( __s : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn tempnam ( __dir : * const :: std :: os :: raw :: c_char , __pfx : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn fclose ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fflush ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fflush_unlocked ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fopen ( __filename : * const :: std :: os :: raw :: c_char , __modes : * const :: std :: os :: raw :: c_char ) -> * mut FILE ; } extern "C" { pub fn freopen ( __filename : * const :: std :: os :: raw :: c_char , __modes : * const :: std :: os :: raw :: c_char , __stream : * mut FILE ) -> * mut FILE ; } extern "C" { pub fn fdopen ( __fd : :: std :: os :: raw :: c_int , __modes : * const :: std :: os :: raw :: c_char ) -> * mut FILE ; } extern "C" { pub fn fmemopen ( __s : * mut :: std :: os :: raw :: c_void , __len : usize , __modes : * const :: std :: os :: raw :: c_char ) -> * mut FILE ; } extern "C" { pub fn open_memstream ( __bufloc : * mut * mut :: std :: os :: raw :: c_char , __sizeloc : * mut usize ) -> * mut FILE ; } extern "C" { pub fn setbuf ( __stream : * mut FILE , __buf : * mut :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn setvbuf ( __stream : * mut FILE , __buf : * mut :: std :: os :: raw :: c_char , __modes : :: std :: os :: raw :: c_int , __n : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setbuffer ( __stream : * mut FILE , __buf : * mut :: std :: os :: raw :: c_char , __size : usize ) ; } extern "C" { pub fn setlinebuf ( __stream : * mut FILE ) ; } extern "C" { pub fn fprintf ( __stream : * mut FILE , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn printf ( __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sprintf ( __s : * mut :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vfprintf ( __s : * mut FILE , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vprintf ( __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vsprintf ( __s : * mut :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn snprintf ( __s : * mut :: std :: os :: raw :: c_char , __maxlen : usize , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vsnprintf ( __s : * mut :: std :: os :: raw :: c_char , __maxlen : usize , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vdprintf ( __fd : :: std :: os :: raw :: c_int , __fmt : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn dprintf ( __fd : :: std :: os :: raw :: c_int , __fmt : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fscanf ( __stream : * mut FILE , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn scanf ( __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sscanf ( __s : * const :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}__isoc99_fscanf" ] pub fn fscanf1 ( __stream : * mut FILE , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}__isoc99_scanf" ] pub fn scanf1 ( __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}__isoc99_sscanf" ] pub fn sscanf1 ( __s : * const :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vfscanf ( __s : * mut FILE , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vscanf ( __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vsscanf ( __s : * const :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}__isoc99_vfscanf" ] pub fn vfscanf1 ( __s : * mut FILE , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}__isoc99_vscanf" ] pub fn vscanf1 ( __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}__isoc99_vsscanf" ] pub fn vsscanf1 ( __s : * const :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fgetc ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getc ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getchar ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getc_unlocked ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getchar_unlocked ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fgetc_unlocked ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fputc ( __c : :: std :: os :: raw :: c_int , __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putc ( __c : :: std :: os :: raw :: c_int , __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putchar ( __c : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fputc_unlocked ( __c : :: std :: os :: raw :: c_int , __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putc_unlocked ( __c : :: std :: os :: raw :: c_int , __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putchar_unlocked ( __c : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getw ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putw ( __w : :: std :: os :: raw :: c_int , __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fgets ( __s : * mut :: std :: os :: raw :: c_char , __n : :: std :: os :: raw :: c_int , __stream : * mut FILE ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn __getdelim ( __lineptr : * mut * mut :: std :: os :: raw :: c_char , __n : * mut usize , __delimiter : :: std :: os :: raw :: c_int , __stream : * mut FILE ) -> __ssize_t ; } extern "C" { pub fn getdelim ( __lineptr : * mut * mut :: std :: os :: raw :: c_char , __n : * mut usize , __delimiter : :: std :: os :: raw :: c_int , __stream : * mut FILE ) -> __ssize_t ; } extern "C" { pub fn getline ( __lineptr : * mut * mut :: std :: os :: raw :: c_char , __n : * mut usize , __stream : * mut FILE ) -> __ssize_t ; } extern "C" { pub fn fputs ( __s : * const :: std :: os :: raw :: c_char , __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn puts ( __s : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ungetc ( __c : :: std :: os :: raw :: c_int , __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fread ( __ptr : * mut :: std :: os :: raw :: c_void , __size : usize , __n : usize , __stream : * mut FILE ) -> :: std :: os :: raw :: c_ulong ; } extern "C" { pub fn fwrite ( __ptr : * const :: std :: os :: raw :: c_void , __size : usize , __n : usize , __s : * mut FILE ) -> :: std :: os :: raw :: c_ulong ; } extern "C" { pub fn fread_unlocked ( __ptr : * mut :: std :: os :: raw :: c_void , __size : usize , __n : usize , __stream : * mut FILE ) -> usize ; } extern "C" { pub fn fwrite_unlocked ( __ptr : * const :: std :: os :: raw :: c_void , __size : usize , __n : usize , __stream : * mut FILE ) -> usize ; } extern "C" { pub fn fseek ( __stream : * mut FILE , __off : :: std :: os :: raw :: c_long , __whence : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ftell ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn rewind ( __stream : * mut FILE ) ; } extern "C" { pub fn fseeko ( __stream : * mut FILE , __off : __off_t , __whence : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ftello ( __stream : * mut FILE ) -> __off_t ; } extern "C" { pub fn fgetpos ( __stream : * mut FILE , __pos : * mut fpos_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fsetpos ( __stream : * mut FILE , __pos : * const fpos_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn clearerr ( __stream : * mut FILE ) ; } extern "C" { pub fn feof ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ferror ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn clearerr_unlocked ( __stream : * mut FILE ) ; } extern "C" { pub fn feof_unlocked ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ferror_unlocked ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn perror ( __s : * const :: std :: os :: raw :: c_char ) ; } extern "C" { # [ link_name = "\u{1}sys_nerr" ] pub static mut sys_nerr : :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}sys_errlist" ] pub static mut sys_errlist : [ * const :: std :: os :: raw :: c_char ; 0usize ] ; } extern "C" { pub fn fileno ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fileno_unlocked ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn popen ( __command : * const :: std :: os :: raw :: c_char , __modes : * const :: std :: os :: raw :: c_char ) -> * mut FILE ; } extern "C" { pub fn pclose ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ctermid ( __s : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn flockfile ( __stream : * mut FILE ) ; } extern "C" { pub fn ftrylockfile ( __stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn funlockfile ( __stream : * mut FILE ) ; } extern "C" { pub fn __uflow ( arg1 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __overflow ( arg1 : * mut FILE , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } pub type wchar_t = :: std :: os :: raw :: c_int ; pub const idtype_t_P_ALL : idtype_t = 0 ; pub const idtype_t_P_PID : idtype_t = 1 ; pub const idtype_t_P_PGID : idtype_t = 2 ; pub type idtype_t = u32 ; pub type _Float32 = f32 ; pub type _Float64 = f64 ; pub type _Float32x = f64 ; pub type _Float64x = f64 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct div_t { pub quot : :: std :: os :: raw :: c_int , pub rem : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_div_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < div_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( div_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < div_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( div_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < div_t > ( ) ) ) . quot as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( div_t ) , "::" , stringify ! ( quot ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < div_t > ( ) ) ) . rem as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( div_t ) , "::" , stringify ! ( rem ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ldiv_t { pub quot : :: std :: os :: raw :: c_long , pub rem : :: std :: os :: raw :: c_long , } # [ test ] fn bindgen_test_layout_ldiv_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ldiv_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ldiv_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ldiv_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ldiv_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ldiv_t > ( ) ) ) . quot as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ldiv_t ) , "::" , stringify ! ( quot ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ldiv_t > ( ) ) ) . rem as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ldiv_t ) , "::" , stringify ! ( rem ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lldiv_t { pub quot : :: std :: os :: raw :: c_longlong , pub rem : :: std :: os :: raw :: c_longlong , } # [ test ] fn bindgen_test_layout_lldiv_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lldiv_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( lldiv_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lldiv_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lldiv_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lldiv_t > ( ) ) ) . quot as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lldiv_t ) , "::" , stringify ! ( quot ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lldiv_t > ( ) ) ) . rem as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lldiv_t ) , "::" , stringify ! ( rem ) ) ) ; } extern "C" { pub fn __ctype_get_mb_cur_max ( ) -> usize ; } extern "C" { pub fn atof ( __nptr : * const :: std :: os :: raw :: c_char ) -> f64 ; } extern "C" { pub fn atoi ( __nptr : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn atol ( __nptr : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn atoll ( __nptr : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn strtod ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char ) -> f64 ; } extern "C" { pub fn strtof ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char ) -> f32 ; } extern "C" { pub fn strtold ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char ) -> f64 ; } extern "C" { pub fn strtol ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn strtoul ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_ulong ; } extern "C" { pub fn strtoq ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn strtouq ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_ulonglong ; } extern "C" { pub fn strtoll ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn strtoull ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_ulonglong ; } extern "C" { pub fn l64a ( __n : :: std :: os :: raw :: c_long ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn a64l ( __s : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn random ( ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn srandom ( __seed : :: std :: os :: raw :: c_uint ) ; } extern "C" { pub fn initstate ( __seed : :: std :: os :: raw :: c_uint , __statebuf : * mut :: std :: os :: raw :: c_char , __statelen : usize ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn setstate ( __statebuf : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct random_data { pub fptr : * mut i32 , pub rptr : * mut i32 , pub state : * mut i32 , pub rand_type : :: std :: os :: raw :: c_int , pub rand_deg : :: std :: os :: raw :: c_int , pub rand_sep : :: std :: os :: raw :: c_int , pub end_ptr : * mut i32 , } # [ test ] fn bindgen_test_layout_random_data ( ) { assert_eq ! ( :: std :: mem :: size_of :: < random_data > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( random_data ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < random_data > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( random_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < random_data > ( ) ) ) . fptr as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( random_data ) , "::" , stringify ! ( fptr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < random_data > ( ) ) ) . rptr as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( random_data ) , "::" , stringify ! ( rptr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < random_data > ( ) ) ) . state as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( random_data ) , "::" , stringify ! ( state ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < random_data > ( ) ) ) . rand_type as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( random_data ) , "::" , stringify ! ( rand_type ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < random_data > ( ) ) ) . rand_deg as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( random_data ) , "::" , stringify ! ( rand_deg ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < random_data > ( ) ) ) . rand_sep as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( random_data ) , "::" , stringify ! ( rand_sep ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < random_data > ( ) ) ) . end_ptr as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( random_data ) , "::" , stringify ! ( end_ptr ) ) ) ; } extern "C" { pub fn random_r ( __buf : * mut random_data , __result : * mut i32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn srandom_r ( __seed : :: std :: os :: raw :: c_uint , __buf : * mut random_data ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn initstate_r ( __seed : :: std :: os :: raw :: c_uint , __statebuf : * mut :: std :: os :: raw :: c_char , __statelen : usize , __buf : * mut random_data ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setstate_r ( __statebuf : * mut :: std :: os :: raw :: c_char , __buf : * mut random_data ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn rand ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn srand ( __seed : :: std :: os :: raw :: c_uint ) ; } extern "C" { pub fn rand_r ( __seed : * mut :: std :: os :: raw :: c_uint ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn drand48 ( ) -> f64 ; } extern "C" { pub fn erand48 ( __xsubi : * mut :: std :: os :: raw :: c_ushort ) -> f64 ; } extern "C" { pub fn lrand48 ( ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn nrand48 ( __xsubi : * mut :: std :: os :: raw :: c_ushort ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn mrand48 ( ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn jrand48 ( __xsubi : * mut :: std :: os :: raw :: c_ushort ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn srand48 ( __seedval : :: std :: os :: raw :: c_long ) ; } extern "C" { pub fn seed48 ( __seed16v : * mut :: std :: os :: raw :: c_ushort ) -> * mut :: std :: os :: raw :: c_ushort ; } extern "C" { pub fn lcong48 ( __param : * mut :: std :: os :: raw :: c_ushort ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct drand48_data { pub __x : [ :: std :: os :: raw :: c_ushort ; 3usize ] , pub __old_x : [ :: std :: os :: raw :: c_ushort ; 3usize ] , pub __c : :: std :: os :: raw :: c_ushort , pub __init : :: std :: os :: raw :: c_ushort , pub __a : :: std :: os :: raw :: c_ulonglong , } # [ test ] fn bindgen_test_layout_drand48_data ( ) { assert_eq ! ( :: std :: mem :: size_of :: < drand48_data > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( drand48_data ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < drand48_data > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( drand48_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < drand48_data > ( ) ) ) . __x as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( drand48_data ) , "::" , stringify ! ( __x ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < drand48_data > ( ) ) ) . __old_x as * const _ as usize } , 6usize , concat ! ( "Offset of field: " , stringify ! ( drand48_data ) , "::" , stringify ! ( __old_x ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < drand48_data > ( ) ) ) . __c as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( drand48_data ) , "::" , stringify ! ( __c ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < drand48_data > ( ) ) ) . __init as * const _ as usize } , 14usize , concat ! ( "Offset of field: " , stringify ! ( drand48_data ) , "::" , stringify ! ( __init ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < drand48_data > ( ) ) ) . __a as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( drand48_data ) , "::" , stringify ! ( __a ) ) ) ; } extern "C" { pub fn drand48_r ( __buffer : * mut drand48_data , __result : * mut f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn erand48_r ( __xsubi : * mut :: std :: os :: raw :: c_ushort , __buffer : * mut drand48_data , __result : * mut f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn lrand48_r ( __buffer : * mut drand48_data , __result : * mut :: std :: os :: raw :: c_long ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn nrand48_r ( __xsubi : * mut :: std :: os :: raw :: c_ushort , __buffer : * mut drand48_data , __result : * mut :: std :: os :: raw :: c_long ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mrand48_r ( __buffer : * mut drand48_data , __result : * mut :: std :: os :: raw :: c_long ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn jrand48_r ( __xsubi : * mut :: std :: os :: raw :: c_ushort , __buffer : * mut drand48_data , __result : * mut :: std :: os :: raw :: c_long ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn srand48_r ( __seedval : :: std :: os :: raw :: c_long , __buffer : * mut drand48_data ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn seed48_r ( __seed16v : * mut :: std :: os :: raw :: c_ushort , __buffer : * mut drand48_data ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn lcong48_r ( __param : * mut :: std :: os :: raw :: c_ushort , __buffer : * mut drand48_data ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn malloc ( __size : usize ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn calloc ( __nmemb : usize , __size : usize ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn realloc ( __ptr : * mut :: std :: os :: raw :: c_void , __size : usize ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn reallocarray ( __ptr : * mut :: std :: os :: raw :: c_void , __nmemb : usize , __size : usize ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn free ( __ptr : * mut :: std :: os :: raw :: c_void ) ; } extern "C" { pub fn alloca ( __size : usize ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn valloc ( __size : usize ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn posix_memalign ( __memptr : * mut * mut :: std :: os :: raw :: c_void , __alignment : usize , __size : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn aligned_alloc ( __alignment : usize , __size : usize ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn abort ( ) ; } extern "C" { pub fn atexit ( __func : :: std :: option :: Option < unsafe extern "C" fn ( ) > ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn at_quick_exit ( __func : :: std :: option :: Option < unsafe extern "C" fn ( ) > ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn on_exit ( __func : :: std :: option :: Option < unsafe extern "C" fn ( __status : :: std :: os :: raw :: c_int , __arg : * mut :: std :: os :: raw :: c_void ) > , __arg : * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn exit ( __status : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn quick_exit ( __status : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn _Exit ( __status : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn getenv ( __name : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn putenv ( __string : * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setenv ( __name : * const :: std :: os :: raw :: c_char , __value : * const :: std :: os :: raw :: c_char , __replace : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn unsetenv ( __name : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn clearenv ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mktemp ( __template : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn mkstemp ( __template : * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mkstemps ( __template : * mut :: std :: os :: raw :: c_char , __suffixlen : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mkdtemp ( __template : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn system ( __command : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn realpath ( __name : * const :: std :: os :: raw :: c_char , __resolved : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } pub type __compar_fn_t = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const :: std :: os :: raw :: c_void , arg2 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int > ; extern "C" { pub fn bsearch ( __key : * const :: std :: os :: raw :: c_void , __base : * const :: std :: os :: raw :: c_void , __nmemb : usize , __size : usize , __compar : __compar_fn_t ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn qsort ( __base : * mut :: std :: os :: raw :: c_void , __nmemb : usize , __size : usize , __compar : __compar_fn_t ) ; } extern "C" { pub fn abs ( __x : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn labs ( __x : :: std :: os :: raw :: c_long ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn llabs ( __x : :: std :: os :: raw :: c_longlong ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn div ( __numer : :: std :: os :: raw :: c_int , __denom : :: std :: os :: raw :: c_int ) -> div_t ; } extern "C" { pub fn ldiv ( __numer : :: std :: os :: raw :: c_long , __denom : :: std :: os :: raw :: c_long ) -> ldiv_t ; } extern "C" { pub fn lldiv ( __numer : :: std :: os :: raw :: c_longlong , __denom : :: std :: os :: raw :: c_longlong ) -> lldiv_t ; } extern "C" { pub fn ecvt ( __value : f64 , __ndigit : :: std :: os :: raw :: c_int , __decpt : * mut :: std :: os :: raw :: c_int , __sign : * mut :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn fcvt ( __value : f64 , __ndigit : :: std :: os :: raw :: c_int , __decpt : * mut :: std :: os :: raw :: c_int , __sign : * mut :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn gcvt ( __value : f64 , __ndigit : :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn qecvt ( __value : f64 , __ndigit : :: std :: os :: raw :: c_int , __decpt : * mut :: std :: os :: raw :: c_int , __sign : * mut :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn qfcvt ( __value : f64 , __ndigit : :: std :: os :: raw :: c_int , __decpt : * mut :: std :: os :: raw :: c_int , __sign : * mut :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn qgcvt ( __value : f64 , __ndigit : :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn ecvt_r ( __value : f64 , __ndigit : :: std :: os :: raw :: c_int , __decpt : * mut :: std :: os :: raw :: c_int , __sign : * mut :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_char , __len : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fcvt_r ( __value : f64 , __ndigit : :: std :: os :: raw :: c_int , __decpt : * mut :: std :: os :: raw :: c_int , __sign : * mut :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_char , __len : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn qecvt_r ( __value : f64 , __ndigit : :: std :: os :: raw :: c_int , __decpt : * mut :: std :: os :: raw :: c_int , __sign : * mut :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_char , __len : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn qfcvt_r ( __value : f64 , __ndigit : :: std :: os :: raw :: c_int , __decpt : * mut :: std :: os :: raw :: c_int , __sign : * mut :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_char , __len : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mblen ( __s : * const :: std :: os :: raw :: c_char , __n : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mbtowc ( __pwc : * mut wchar_t , __s : * const :: std :: os :: raw :: c_char , __n : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn wctomb ( __s : * mut :: std :: os :: raw :: c_char , __wchar : wchar_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mbstowcs ( __pwcs : * mut wchar_t , __s : * const :: std :: os :: raw :: c_char , __n : usize ) -> usize ; } extern "C" { pub fn wcstombs ( __s : * mut :: std :: os :: raw :: c_char , __pwcs : * const wchar_t , __n : usize ) -> usize ; } extern "C" { pub fn rpmatch ( __response : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getsubopt ( __optionp : * mut * mut :: std :: os :: raw :: c_char , __tokens : * const * mut :: std :: os :: raw :: c_char , __valuep : * mut * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getloadavg ( __loadavg : * mut f64 , __nelem : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn memcpy ( __dest : * mut :: std :: os :: raw :: c_void , __src : * const :: std :: os :: raw :: c_void , __n : usize ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn memmove ( __dest : * mut :: std :: os :: raw :: c_void , __src : * const :: std :: os :: raw :: c_void , __n : usize ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn memccpy ( __dest : * mut :: std :: os :: raw :: c_void , __src : * const :: std :: os :: raw :: c_void , __c : :: std :: os :: raw :: c_int , __n : usize ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn memset ( __s : * mut :: std :: os :: raw :: c_void , __c : :: std :: os :: raw :: c_int , __n : usize ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn memcmp ( __s1 : * const :: std :: os :: raw :: c_void , __s2 : * const :: std :: os :: raw :: c_void , __n : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn memchr ( __s : * const :: std :: os :: raw :: c_void , __c : :: std :: os :: raw :: c_int , __n : usize ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn strcpy ( __dest : * mut :: std :: os :: raw :: c_char , __src : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strncpy ( __dest : * mut :: std :: os :: raw :: c_char , __src : * const :: std :: os :: raw :: c_char , __n : usize ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strcat ( __dest : * mut :: std :: os :: raw :: c_char , __src : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strncat ( __dest : * mut :: std :: os :: raw :: c_char , __src : * const :: std :: os :: raw :: c_char , __n : usize ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strcmp ( __s1 : * const :: std :: os :: raw :: c_char , __s2 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn strncmp ( __s1 : * const :: std :: os :: raw :: c_char , __s2 : * const :: std :: os :: raw :: c_char , __n : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn strcoll ( __s1 : * const :: std :: os :: raw :: c_char , __s2 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn strxfrm ( __dest : * mut :: std :: os :: raw :: c_char , __src : * const :: std :: os :: raw :: c_char , __n : usize ) -> :: std :: os :: raw :: c_ulong ; } extern "C" { pub fn strcoll_l ( __s1 : * const :: std :: os :: raw :: c_char , __s2 : * const :: std :: os :: raw :: c_char , __l : locale_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn strxfrm_l ( __dest : * mut :: std :: os :: raw :: c_char , __src : * const :: std :: os :: raw :: c_char , __n : usize , __l : locale_t ) -> usize ; } extern "C" { pub fn strdup ( __s : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strndup ( __string : * const :: std :: os :: raw :: c_char , __n : usize ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strchr ( __s : * const :: std :: os :: raw :: c_char , __c : :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strrchr ( __s : * const :: std :: os :: raw :: c_char , __c : :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strcspn ( __s : * const :: std :: os :: raw :: c_char , __reject : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_ulong ; } extern "C" { pub fn strspn ( __s : * const :: std :: os :: raw :: c_char , __accept : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_ulong ; } extern "C" { pub fn strpbrk ( __s : * const :: std :: os :: raw :: c_char , __accept : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strstr ( __haystack : * const :: std :: os :: raw :: c_char , __needle : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strtok ( __s : * mut :: std :: os :: raw :: c_char , __delim : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn __strtok_r ( __s : * mut :: std :: os :: raw :: c_char , __delim : * const :: std :: os :: raw :: c_char , __save_ptr : * mut * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strtok_r ( __s : * mut :: std :: os :: raw :: c_char , __delim : * const :: std :: os :: raw :: c_char , __save_ptr : * mut * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strlen ( __s : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_ulong ; } extern "C" { pub fn strnlen ( __string : * const :: std :: os :: raw :: c_char , __maxlen : usize ) -> usize ; } extern "C" { pub fn strerror ( __errnum : :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { # [ link_name = "\u{1}__xpg_strerror_r" ] pub fn strerror_r ( __errnum : :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_char , __buflen : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn strerror_l ( __errnum : :: std :: os :: raw :: c_int , __l : locale_t ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn bcmp ( __s1 : * const :: std :: os :: raw :: c_void , __s2 : * const :: std :: os :: raw :: c_void , __n : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn bcopy ( __src : * const :: std :: os :: raw :: c_void , __dest : * mut :: std :: os :: raw :: c_void , __n : usize ) ; } extern "C" { pub fn bzero ( __s : * mut :: std :: os :: raw :: c_void , __n : usize ) ; } extern "C" { pub fn index ( __s : * const :: std :: os :: raw :: c_char , __c : :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn rindex ( __s : * const :: std :: os :: raw :: c_char , __c : :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn ffs ( __i : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ffsl ( __l : :: std :: os :: raw :: c_long ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ffsll ( __ll : :: std :: os :: raw :: c_longlong ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn strcasecmp ( __s1 : * const :: std :: os :: raw :: c_char , __s2 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn strncasecmp ( __s1 : * const :: std :: os :: raw :: c_char , __s2 : * const :: std :: os :: raw :: c_char , __n : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn strcasecmp_l ( __s1 : * const :: std :: os :: raw :: c_char , __s2 : * const :: std :: os :: raw :: c_char , __loc : locale_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn strncasecmp_l ( __s1 : * const :: std :: os :: raw :: c_char , __s2 : * const :: std :: os :: raw :: c_char , __n : usize , __loc : locale_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn explicit_bzero ( __s : * mut :: std :: os :: raw :: c_void , __n : usize ) ; } extern "C" { pub fn strsep ( __stringp : * mut * mut :: std :: os :: raw :: c_char , __delim : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strsignal ( __sig : :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn __stpcpy ( __dest : * mut :: std :: os :: raw :: c_char , __src : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn stpcpy ( __dest : * mut :: std :: os :: raw :: c_char , __src : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn __stpncpy ( __dest : * mut :: std :: os :: raw :: c_char , __src : * const :: std :: os :: raw :: c_char , __n : usize ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn stpncpy ( __dest : * mut :: std :: os :: raw :: c_char , __src : * const :: std :: os :: raw :: c_char , __n : usize ) -> * mut :: std :: os :: raw :: c_char ; } pub type __jmp_buf = [ :: std :: os :: raw :: c_long ; 8usize ] ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __jmp_buf_tag { pub __jmpbuf : __jmp_buf , pub __mask_was_saved : :: std :: os :: raw :: c_int , pub __saved_mask : __sigset_t , } # [ test ] fn bindgen_test_layout___jmp_buf_tag ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __jmp_buf_tag > ( ) , 200usize , concat ! ( "Size of: " , stringify ! ( __jmp_buf_tag ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __jmp_buf_tag > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __jmp_buf_tag ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __jmp_buf_tag > ( ) ) ) . __jmpbuf as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __jmp_buf_tag ) , "::" , stringify ! ( __jmpbuf ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __jmp_buf_tag > ( ) ) ) . __mask_was_saved as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( __jmp_buf_tag ) , "::" , stringify ! ( __mask_was_saved ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __jmp_buf_tag > ( ) ) ) . __saved_mask as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( __jmp_buf_tag ) , "::" , stringify ! ( __saved_mask ) ) ) ; } pub type jmp_buf = [ __jmp_buf_tag ; 1usize ] ; extern "C" { pub fn setjmp ( __env : * mut __jmp_buf_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __sigsetjmp ( __env : * mut __jmp_buf_tag , __savemask : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _setjmp ( __env : * mut __jmp_buf_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn longjmp ( __env : * mut __jmp_buf_tag , __val : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn _longjmp ( __env : * mut __jmp_buf_tag , __val : :: std :: os :: raw :: c_int ) ; } pub type sigjmp_buf = [ __jmp_buf_tag ; 1usize ] ; extern "C" { pub fn siglongjmp ( __env : * mut __jmp_buf_tag , __val : :: std :: os :: raw :: c_int ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct max_align_t { pub __clang_max_align_nonce1 : :: std :: os :: raw :: c_longlong , pub __bindgen_padding_0 : u64 , pub __clang_max_align_nonce2 : f64 , } # [ test ] fn bindgen_test_layout_max_align_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < max_align_t > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( max_align_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < max_align_t > ( ) ) ) . __clang_max_align_nonce1 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( max_align_t ) , "::" , stringify ! ( __clang_max_align_nonce1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < max_align_t > ( ) ) ) . __clang_max_align_nonce2 as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( max_align_t ) , "::" , stringify ! ( __clang_max_align_nonce2 ) ) ) ; } pub type float_t = f32 ; pub type double_t = f64 ; extern "C" { pub fn __fpclassify ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __signbit ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __isinf ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __finite ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __isnan ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __iseqsig ( __x : f64 , __y : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __issignaling ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn acos ( __x : f64 ) -> f64 ; } extern "C" { pub fn __acos ( __x : f64 ) -> f64 ; } extern "C" { pub fn asin ( __x : f64 ) -> f64 ; } extern "C" { pub fn __asin ( __x : f64 ) -> f64 ; } extern "C" { pub fn atan ( __x : f64 ) -> f64 ; } extern "C" { pub fn __atan ( __x : f64 ) -> f64 ; } extern "C" { pub fn atan2 ( __y : f64 , __x : f64 ) -> f64 ; } extern "C" { pub fn __atan2 ( __y : f64 , __x : f64 ) -> f64 ; } extern "C" { pub fn cos ( __x : f64 ) -> f64 ; } extern "C" { pub fn __cos ( __x : f64 ) -> f64 ; } extern "C" { pub fn sin ( __x : f64 ) -> f64 ; } extern "C" { pub fn __sin ( __x : f64 ) -> f64 ; } extern "C" { pub fn tan ( __x : f64 ) -> f64 ; } extern "C" { pub fn __tan ( __x : f64 ) -> f64 ; } extern "C" { pub fn cosh ( __x : f64 ) -> f64 ; } extern "C" { pub fn __cosh ( __x : f64 ) -> f64 ; } extern "C" { pub fn sinh ( __x : f64 ) -> f64 ; } extern "C" { pub fn __sinh ( __x : f64 ) -> f64 ; } extern "C" { pub fn tanh ( __x : f64 ) -> f64 ; } extern "C" { pub fn __tanh ( __x : f64 ) -> f64 ; } extern "C" { pub fn acosh ( __x : f64 ) -> f64 ; } extern "C" { pub fn __acosh ( __x : f64 ) -> f64 ; } extern "C" { pub fn asinh ( __x : f64 ) -> f64 ; } extern "C" { pub fn __asinh ( __x : f64 ) -> f64 ; } extern "C" { pub fn atanh ( __x : f64 ) -> f64 ; } extern "C" { pub fn __atanh ( __x : f64 ) -> f64 ; } extern "C" { pub fn exp ( __x : f64 ) -> f64 ; } extern "C" { pub fn __exp ( __x : f64 ) -> f64 ; } extern "C" { pub fn frexp ( __x : f64 , __exponent : * mut :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn __frexp ( __x : f64 , __exponent : * mut :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn ldexp ( __x : f64 , __exponent : :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn __ldexp ( __x : f64 , __exponent : :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn log ( __x : f64 ) -> f64 ; } extern "C" { pub fn __log ( __x : f64 ) -> f64 ; } extern "C" { pub fn log10 ( __x : f64 ) -> f64 ; } extern "C" { pub fn __log10 ( __x : f64 ) -> f64 ; } extern "C" { pub fn modf ( __x : f64 , __iptr : * mut f64 ) -> f64 ; } extern "C" { pub fn __modf ( __x : f64 , __iptr : * mut f64 ) -> f64 ; } extern "C" { pub fn expm1 ( __x : f64 ) -> f64 ; } extern "C" { pub fn __expm1 ( __x : f64 ) -> f64 ; } extern "C" { pub fn log1p ( __x : f64 ) -> f64 ; } extern "C" { pub fn __log1p ( __x : f64 ) -> f64 ; } extern "C" { pub fn logb ( __x : f64 ) -> f64 ; } extern "C" { pub fn __logb ( __x : f64 ) -> f64 ; } extern "C" { pub fn exp2 ( __x : f64 ) -> f64 ; } extern "C" { pub fn __exp2 ( __x : f64 ) -> f64 ; } extern "C" { pub fn log2 ( __x : f64 ) -> f64 ; } extern "C" { pub fn __log2 ( __x : f64 ) -> f64 ; } extern "C" { pub fn pow ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __pow ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn sqrt ( __x : f64 ) -> f64 ; } extern "C" { pub fn __sqrt ( __x : f64 ) -> f64 ; } extern "C" { pub fn hypot ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __hypot ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn cbrt ( __x : f64 ) -> f64 ; } extern "C" { pub fn __cbrt ( __x : f64 ) -> f64 ; } extern "C" { pub fn ceil ( __x : f64 ) -> f64 ; } extern "C" { pub fn __ceil ( __x : f64 ) -> f64 ; } extern "C" { pub fn fabs ( __x : f64 ) -> f64 ; } extern "C" { pub fn __fabs ( __x : f64 ) -> f64 ; } extern "C" { pub fn floor ( __x : f64 ) -> f64 ; } extern "C" { pub fn __floor ( __x : f64 ) -> f64 ; } extern "C" { pub fn fmod ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __fmod ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn isinf ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn finite ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn drem ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __drem ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn significand ( __x : f64 ) -> f64 ; } extern "C" { pub fn __significand ( __x : f64 ) -> f64 ; } extern "C" { pub fn copysign ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __copysign ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn nan ( __tagb : * const :: std :: os :: raw :: c_char ) -> f64 ; } extern "C" { pub fn __nan ( __tagb : * const :: std :: os :: raw :: c_char ) -> f64 ; } extern "C" { pub fn isnan ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn j0 ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __j0 ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn j1 ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __j1 ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn jn ( arg1 : :: std :: os :: raw :: c_int , arg2 : f64 ) -> f64 ; } extern "C" { pub fn __jn ( arg1 : :: std :: os :: raw :: c_int , arg2 : f64 ) -> f64 ; } extern "C" { pub fn y0 ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __y0 ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn y1 ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __y1 ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn yn ( arg1 : :: std :: os :: raw :: c_int , arg2 : f64 ) -> f64 ; } extern "C" { pub fn __yn ( arg1 : :: std :: os :: raw :: c_int , arg2 : f64 ) -> f64 ; } extern "C" { pub fn erf ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __erf ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn erfc ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __erfc ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn lgamma ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __lgamma ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn tgamma ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __tgamma ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn gamma ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __gamma ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn lgamma_r ( arg1 : f64 , __signgamp : * mut :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn __lgamma_r ( arg1 : f64 , __signgamp : * mut :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn rint ( __x : f64 ) -> f64 ; } extern "C" { pub fn __rint ( __x : f64 ) -> f64 ; } extern "C" { pub fn nextafter ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __nextafter ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn nexttoward ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __nexttoward ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn remainder ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __remainder ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn scalbn ( __x : f64 , __n : :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn __scalbn ( __x : f64 , __n : :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn ilogb ( __x : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __ilogb ( __x : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn scalbln ( __x : f64 , __n : :: std :: os :: raw :: c_long ) -> f64 ; } extern "C" { pub fn __scalbln ( __x : f64 , __n : :: std :: os :: raw :: c_long ) -> f64 ; } extern "C" { pub fn nearbyint ( __x : f64 ) -> f64 ; } extern "C" { pub fn __nearbyint ( __x : f64 ) -> f64 ; } extern "C" { pub fn round ( __x : f64 ) -> f64 ; } extern "C" { pub fn __round ( __x : f64 ) -> f64 ; } extern "C" { pub fn trunc ( __x : f64 ) -> f64 ; } extern "C" { pub fn __trunc ( __x : f64 ) -> f64 ; } extern "C" { pub fn remquo ( __x : f64 , __y : f64 , __quo : * mut :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn __remquo ( __x : f64 , __y : f64 , __quo : * mut :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn lrint ( __x : f64 ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn __lrint ( __x : f64 ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn llrint ( __x : f64 ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn __llrint ( __x : f64 ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn lround ( __x : f64 ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn __lround ( __x : f64 ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn llround ( __x : f64 ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn __llround ( __x : f64 ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn fdim ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __fdim ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn fmax ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __fmax ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn fmin ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __fmin ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn fma ( __x : f64 , __y : f64 , __z : f64 ) -> f64 ; } extern "C" { pub fn __fma ( __x : f64 , __y : f64 , __z : f64 ) -> f64 ; } extern "C" { pub fn scalb ( __x : f64 , __n : f64 ) -> f64 ; } extern "C" { pub fn __scalb ( __x : f64 , __n : f64 ) -> f64 ; } extern "C" { pub fn __fpclassifyf ( __value : f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __signbitf ( __value : f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __isinff ( __value : f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __finitef ( __value : f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __isnanf ( __value : f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __iseqsigf ( __x : f32 , __y : f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __issignalingf ( __value : f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn acosf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __acosf ( __x : f32 ) -> f32 ; } extern "C" { pub fn asinf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __asinf ( __x : f32 ) -> f32 ; } extern "C" { pub fn atanf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __atanf ( __x : f32 ) -> f32 ; } extern "C" { pub fn atan2f ( __y : f32 , __x : f32 ) -> f32 ; } extern "C" { pub fn __atan2f ( __y : f32 , __x : f32 ) -> f32 ; } extern "C" { pub fn cosf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __cosf ( __x : f32 ) -> f32 ; } extern "C" { pub fn sinf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __sinf ( __x : f32 ) -> f32 ; } extern "C" { pub fn tanf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __tanf ( __x : f32 ) -> f32 ; } extern "C" { pub fn coshf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __coshf ( __x : f32 ) -> f32 ; } extern "C" { pub fn sinhf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __sinhf ( __x : f32 ) -> f32 ; } extern "C" { pub fn tanhf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __tanhf ( __x : f32 ) -> f32 ; } extern "C" { pub fn acoshf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __acoshf ( __x : f32 ) -> f32 ; } extern "C" { pub fn asinhf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __asinhf ( __x : f32 ) -> f32 ; } extern "C" { pub fn atanhf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __atanhf ( __x : f32 ) -> f32 ; } extern "C" { pub fn expf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __expf ( __x : f32 ) -> f32 ; } extern "C" { pub fn frexpf ( __x : f32 , __exponent : * mut :: std :: os :: raw :: c_int ) -> f32 ; } extern "C" { pub fn __frexpf ( __x : f32 , __exponent : * mut :: std :: os :: raw :: c_int ) -> f32 ; } extern "C" { pub fn ldexpf ( __x : f32 , __exponent : :: std :: os :: raw :: c_int ) -> f32 ; } extern "C" { pub fn __ldexpf ( __x : f32 , __exponent : :: std :: os :: raw :: c_int ) -> f32 ; } extern "C" { pub fn logf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __logf ( __x : f32 ) -> f32 ; } extern "C" { pub fn log10f ( __x : f32 ) -> f32 ; } extern "C" { pub fn __log10f ( __x : f32 ) -> f32 ; } extern "C" { pub fn modff ( __x : f32 , __iptr : * mut f32 ) -> f32 ; } extern "C" { pub fn __modff ( __x : f32 , __iptr : * mut f32 ) -> f32 ; } extern "C" { pub fn expm1f ( __x : f32 ) -> f32 ; } extern "C" { pub fn __expm1f ( __x : f32 ) -> f32 ; } extern "C" { pub fn log1pf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __log1pf ( __x : f32 ) -> f32 ; } extern "C" { pub fn logbf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __logbf ( __x : f32 ) -> f32 ; } extern "C" { pub fn exp2f ( __x : f32 ) -> f32 ; } extern "C" { pub fn __exp2f ( __x : f32 ) -> f32 ; } extern "C" { pub fn log2f ( __x : f32 ) -> f32 ; } extern "C" { pub fn __log2f ( __x : f32 ) -> f32 ; } extern "C" { pub fn powf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn __powf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn sqrtf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __sqrtf ( __x : f32 ) -> f32 ; } extern "C" { pub fn hypotf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn __hypotf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn cbrtf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __cbrtf ( __x : f32 ) -> f32 ; } extern "C" { pub fn ceilf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __ceilf ( __x : f32 ) -> f32 ; } extern "C" { pub fn fabsf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __fabsf ( __x : f32 ) -> f32 ; } extern "C" { pub fn floorf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __floorf ( __x : f32 ) -> f32 ; } extern "C" { pub fn fmodf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn __fmodf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn isinff ( __value : f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn finitef ( __value : f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn dremf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn __dremf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn significandf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __significandf ( __x : f32 ) -> f32 ; } extern "C" { pub fn copysignf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn __copysignf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn nanf ( __tagb : * const :: std :: os :: raw :: c_char ) -> f32 ; } extern "C" { pub fn __nanf ( __tagb : * const :: std :: os :: raw :: c_char ) -> f32 ; } extern "C" { pub fn isnanf ( __value : f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn j0f ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn __j0f ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn j1f ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn __j1f ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn jnf ( arg1 : :: std :: os :: raw :: c_int , arg2 : f32 ) -> f32 ; } extern "C" { pub fn __jnf ( arg1 : :: std :: os :: raw :: c_int , arg2 : f32 ) -> f32 ; } extern "C" { pub fn y0f ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn __y0f ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn y1f ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn __y1f ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn ynf ( arg1 : :: std :: os :: raw :: c_int , arg2 : f32 ) -> f32 ; } extern "C" { pub fn __ynf ( arg1 : :: std :: os :: raw :: c_int , arg2 : f32 ) -> f32 ; } extern "C" { pub fn erff ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn __erff ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn erfcf ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn __erfcf ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn lgammaf ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn __lgammaf ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn tgammaf ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn __tgammaf ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn gammaf ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn __gammaf ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn lgammaf_r ( arg1 : f32 , __signgamp : * mut :: std :: os :: raw :: c_int ) -> f32 ; } extern "C" { pub fn __lgammaf_r ( arg1 : f32 , __signgamp : * mut :: std :: os :: raw :: c_int ) -> f32 ; } extern "C" { pub fn rintf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __rintf ( __x : f32 ) -> f32 ; } extern "C" { pub fn nextafterf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn __nextafterf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn nexttowardf ( __x : f32 , __y : f64 ) -> f32 ; } extern "C" { pub fn __nexttowardf ( __x : f32 , __y : f64 ) -> f32 ; } extern "C" { pub fn remainderf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn __remainderf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn scalbnf ( __x : f32 , __n : :: std :: os :: raw :: c_int ) -> f32 ; } extern "C" { pub fn __scalbnf ( __x : f32 , __n : :: std :: os :: raw :: c_int ) -> f32 ; } extern "C" { pub fn ilogbf ( __x : f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __ilogbf ( __x : f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn scalblnf ( __x : f32 , __n : :: std :: os :: raw :: c_long ) -> f32 ; } extern "C" { pub fn __scalblnf ( __x : f32 , __n : :: std :: os :: raw :: c_long ) -> f32 ; } extern "C" { pub fn nearbyintf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __nearbyintf ( __x : f32 ) -> f32 ; } extern "C" { pub fn roundf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __roundf ( __x : f32 ) -> f32 ; } extern "C" { pub fn truncf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __truncf ( __x : f32 ) -> f32 ; } extern "C" { pub fn remquof ( __x : f32 , __y : f32 , __quo : * mut :: std :: os :: raw :: c_int ) -> f32 ; } extern "C" { pub fn __remquof ( __x : f32 , __y : f32 , __quo : * mut :: std :: os :: raw :: c_int ) -> f32 ; } extern "C" { pub fn lrintf ( __x : f32 ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn __lrintf ( __x : f32 ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn llrintf ( __x : f32 ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn __llrintf ( __x : f32 ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn lroundf ( __x : f32 ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn __lroundf ( __x : f32 ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn llroundf ( __x : f32 ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn __llroundf ( __x : f32 ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn fdimf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn __fdimf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn fmaxf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn __fmaxf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn fminf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn __fminf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn fmaf ( __x : f32 , __y : f32 , __z : f32 ) -> f32 ; } extern "C" { pub fn __fmaf ( __x : f32 , __y : f32 , __z : f32 ) -> f32 ; } extern "C" { pub fn scalbf ( __x : f32 , __n : f32 ) -> f32 ; } extern "C" { pub fn __scalbf ( __x : f32 , __n : f32 ) -> f32 ; } extern "C" { pub fn __fpclassifyl ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __signbitl ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __isinfl ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __finitel ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __isnanl ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __iseqsigl ( __x : f64 , __y : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __issignalingl ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn acosl ( __x : f64 ) -> f64 ; } extern "C" { pub fn __acosl ( __x : f64 ) -> f64 ; } extern "C" { pub fn asinl ( __x : f64 ) -> f64 ; } extern "C" { pub fn __asinl ( __x : f64 ) -> f64 ; } extern "C" { pub fn atanl ( __x : f64 ) -> f64 ; } extern "C" { pub fn __atanl ( __x : f64 ) -> f64 ; } extern "C" { pub fn atan2l ( __y : f64 , __x : f64 ) -> f64 ; } extern "C" { pub fn __atan2l ( __y : f64 , __x : f64 ) -> f64 ; } extern "C" { pub fn cosl ( __x : f64 ) -> f64 ; } extern "C" { pub fn __cosl ( __x : f64 ) -> f64 ; } extern "C" { pub fn sinl ( __x : f64 ) -> f64 ; } extern "C" { pub fn __sinl ( __x : f64 ) -> f64 ; } extern "C" { pub fn tanl ( __x : f64 ) -> f64 ; } extern "C" { pub fn __tanl ( __x : f64 ) -> f64 ; } extern "C" { pub fn coshl ( __x : f64 ) -> f64 ; } extern "C" { pub fn __coshl ( __x : f64 ) -> f64 ; } extern "C" { pub fn sinhl ( __x : f64 ) -> f64 ; } extern "C" { pub fn __sinhl ( __x : f64 ) -> f64 ; } extern "C" { pub fn tanhl ( __x : f64 ) -> f64 ; } extern "C" { pub fn __tanhl ( __x : f64 ) -> f64 ; } extern "C" { pub fn acoshl ( __x : f64 ) -> f64 ; } extern "C" { pub fn __acoshl ( __x : f64 ) -> f64 ; } extern "C" { pub fn asinhl ( __x : f64 ) -> f64 ; } extern "C" { pub fn __asinhl ( __x : f64 ) -> f64 ; } extern "C" { pub fn atanhl ( __x : f64 ) -> f64 ; } extern "C" { pub fn __atanhl ( __x : f64 ) -> f64 ; } extern "C" { pub fn expl ( __x : f64 ) -> f64 ; } extern "C" { pub fn __expl ( __x : f64 ) -> f64 ; } extern "C" { pub fn frexpl ( __x : f64 , __exponent : * mut :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn __frexpl ( __x : f64 , __exponent : * mut :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn ldexpl ( __x : f64 , __exponent : :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn __ldexpl ( __x : f64 , __exponent : :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn logl ( __x : f64 ) -> f64 ; } extern "C" { pub fn __logl ( __x : f64 ) -> f64 ; } extern "C" { pub fn log10l ( __x : f64 ) -> f64 ; } extern "C" { pub fn __log10l ( __x : f64 ) -> f64 ; } extern "C" { pub fn modfl ( __x : f64 , __iptr : * mut f64 ) -> f64 ; } extern "C" { pub fn __modfl ( __x : f64 , __iptr : * mut f64 ) -> f64 ; } extern "C" { pub fn expm1l ( __x : f64 ) -> f64 ; } extern "C" { pub fn __expm1l ( __x : f64 ) -> f64 ; } extern "C" { pub fn log1pl ( __x : f64 ) -> f64 ; } extern "C" { pub fn __log1pl ( __x : f64 ) -> f64 ; } extern "C" { pub fn logbl ( __x : f64 ) -> f64 ; } extern "C" { pub fn __logbl ( __x : f64 ) -> f64 ; } extern "C" { pub fn exp2l ( __x : f64 ) -> f64 ; } extern "C" { pub fn __exp2l ( __x : f64 ) -> f64 ; } extern "C" { pub fn log2l ( __x : f64 ) -> f64 ; } extern "C" { pub fn __log2l ( __x : f64 ) -> f64 ; } extern "C" { pub fn powl ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __powl ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn sqrtl ( __x : f64 ) -> f64 ; } extern "C" { pub fn __sqrtl ( __x : f64 ) -> f64 ; } extern "C" { pub fn hypotl ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __hypotl ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn cbrtl ( __x : f64 ) -> f64 ; } extern "C" { pub fn __cbrtl ( __x : f64 ) -> f64 ; } extern "C" { pub fn ceill ( __x : f64 ) -> f64 ; } extern "C" { pub fn __ceill ( __x : f64 ) -> f64 ; } extern "C" { pub fn fabsl ( __x : f64 ) -> f64 ; } extern "C" { pub fn __fabsl ( __x : f64 ) -> f64 ; } extern "C" { pub fn floorl ( __x : f64 ) -> f64 ; } extern "C" { pub fn __floorl ( __x : f64 ) -> f64 ; } extern "C" { pub fn fmodl ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __fmodl ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn isinfl ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn finitel ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn dreml ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __dreml ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn significandl ( __x : f64 ) -> f64 ; } extern "C" { pub fn __significandl ( __x : f64 ) -> f64 ; } extern "C" { pub fn copysignl ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __copysignl ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn nanl ( __tagb : * const :: std :: os :: raw :: c_char ) -> f64 ; } extern "C" { pub fn __nanl ( __tagb : * const :: std :: os :: raw :: c_char ) -> f64 ; } extern "C" { pub fn isnanl ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn j0l ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __j0l ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn j1l ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __j1l ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn jnl ( arg1 : :: std :: os :: raw :: c_int , arg2 : f64 ) -> f64 ; } extern "C" { pub fn __jnl ( arg1 : :: std :: os :: raw :: c_int , arg2 : f64 ) -> f64 ; } extern "C" { pub fn y0l ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __y0l ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn y1l ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __y1l ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn ynl ( arg1 : :: std :: os :: raw :: c_int , arg2 : f64 ) -> f64 ; } extern "C" { pub fn __ynl ( arg1 : :: std :: os :: raw :: c_int , arg2 : f64 ) -> f64 ; } extern "C" { pub fn erfl ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __erfl ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn erfcl ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __erfcl ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn lgammal ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __lgammal ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn tgammal ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __tgammal ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn gammal ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __gammal ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn lgammal_r ( arg1 : f64 , __signgamp : * mut :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn __lgammal_r ( arg1 : f64 , __signgamp : * mut :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn rintl ( __x : f64 ) -> f64 ; } extern "C" { pub fn __rintl ( __x : f64 ) -> f64 ; } extern "C" { pub fn nextafterl ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __nextafterl ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn nexttowardl ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __nexttowardl ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn remainderl ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __remainderl ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn scalbnl ( __x : f64 , __n : :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn __scalbnl ( __x : f64 , __n : :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn ilogbl ( __x : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __ilogbl ( __x : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn scalblnl ( __x : f64 , __n : :: std :: os :: raw :: c_long ) -> f64 ; } extern "C" { pub fn __scalblnl ( __x : f64 , __n : :: std :: os :: raw :: c_long ) -> f64 ; } extern "C" { pub fn nearbyintl ( __x : f64 ) -> f64 ; } extern "C" { pub fn __nearbyintl ( __x : f64 ) -> f64 ; } extern "C" { pub fn roundl ( __x : f64 ) -> f64 ; } extern "C" { pub fn __roundl ( __x : f64 ) -> f64 ; } extern "C" { pub fn truncl ( __x : f64 ) -> f64 ; } extern "C" { pub fn __truncl ( __x : f64 ) -> f64 ; } extern "C" { pub fn remquol ( __x : f64 , __y : f64 , __quo : * mut :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn __remquol ( __x : f64 , __y : f64 , __quo : * mut :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn lrintl ( __x : f64 ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn __lrintl ( __x : f64 ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn llrintl ( __x : f64 ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn __llrintl ( __x : f64 ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn lroundl ( __x : f64 ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn __lroundl ( __x : f64 ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn llroundl ( __x : f64 ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn __llroundl ( __x : f64 ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn fdiml ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __fdiml ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn fmaxl ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __fmaxl ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn fminl ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __fminl ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn fmal ( __x : f64 , __y : f64 , __z : f64 ) -> f64 ; } extern "C" { pub fn __fmal ( __x : f64 , __y : f64 , __z : f64 ) -> f64 ; } extern "C" { pub fn scalbl ( __x : f64 , __n : f64 ) -> f64 ; } extern "C" { pub fn __scalbl ( __x : f64 , __n : f64 ) -> f64 ; } extern "C" { # [ link_name = "\u{1}signgam" ] pub static mut signgam : :: std :: os :: raw :: c_int ; } pub const FP_NAN : _bindgen_ty_10 = 0 ; pub const FP_INFINITE : _bindgen_ty_10 = 1 ; pub const FP_ZERO : _bindgen_ty_10 = 2 ; pub const FP_SUBNORMAL : _bindgen_ty_10 = 3 ; pub const FP_NORMAL : _bindgen_ty_10 = 4 ; pub type _bindgen_ty_10 = u32 ; pub type __gwchar_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct imaxdiv_t { pub quot : :: std :: os :: raw :: c_long , pub rem : :: std :: os :: raw :: c_long , } # [ test ] fn bindgen_test_layout_imaxdiv_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < imaxdiv_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( imaxdiv_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < imaxdiv_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( imaxdiv_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < imaxdiv_t > ( ) ) ) . quot as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( imaxdiv_t ) , "::" , stringify ! ( quot ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < imaxdiv_t > ( ) ) ) . rem as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( imaxdiv_t ) , "::" , stringify ! ( rem ) ) ) ; } extern "C" { pub fn imaxabs ( __n : intmax_t ) -> intmax_t ; } extern "C" { pub fn imaxdiv ( __numer : intmax_t , __denom : intmax_t ) -> imaxdiv_t ; } extern "C" { pub fn strtoimax ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int ) -> intmax_t ; } extern "C" { pub fn strtoumax ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int ) -> uintmax_t ; } extern "C" { pub fn wcstoimax ( __nptr : * const __gwchar_t , __endptr : * mut * mut __gwchar_t , __base : :: std :: os :: raw :: c_int ) -> intmax_t ; } extern "C" { pub fn wcstoumax ( __nptr : * const __gwchar_t , __endptr : * mut * mut __gwchar_t , __base : :: std :: os :: raw :: c_int ) -> uintmax_t ; } pub type duk_uint8_t = u8 ; pub type duk_int8_t = i8 ; pub type duk_uint16_t = u16 ; pub type duk_int16_t = i16 ; pub type duk_uint32_t = u32 ; pub type duk_int32_t = i32 ; pub type duk_uint64_t = u64 ; pub type duk_int64_t = i64 ; pub type duk_uint_least8_t = uint_least8_t ; pub type duk_int_least8_t = int_least8_t ; pub type duk_uint_least16_t = uint_least16_t ; pub type duk_int_least16_t = int_least16_t ; pub type duk_uint_least32_t = uint_least32_t ; pub type duk_int_least32_t = int_least32_t ; pub type duk_uint_least64_t = uint_least64_t ; pub type duk_int_least64_t = int_least64_t ; pub type duk_uint_fast8_t = uint_fast8_t ; pub type duk_int_fast8_t = int_fast8_t ; pub type duk_uint_fast16_t = uint_fast16_t ; pub type duk_int_fast16_t = int_fast16_t ; pub type duk_uint_fast32_t = uint_fast32_t ; pub type duk_int_fast32_t = int_fast32_t ; pub type duk_uint_fast64_t = uint_fast64_t ; pub type duk_int_fast64_t = int_fast64_t ; pub type duk_uintptr_t = usize ; pub type duk_intptr_t = isize ; pub type duk_uintmax_t = uintmax_t ; pub type duk_intmax_t = intmax_t ; pub type duk_size_t = usize ; pub type duk_ptrdiff_t = isize ; pub type duk_int_t = :: std :: os :: raw :: c_int ; pub type duk_uint_t = :: std :: os :: raw :: c_uint ; pub type duk_int_fast_t = duk_int_fast32_t ; pub type duk_uint_fast_t = duk_uint_fast32_t ; pub type duk_small_int_t = :: std :: os :: raw :: c_int ; pub type duk_small_uint_t = :: std :: os :: raw :: c_uint ; pub type duk_small_int_fast_t = duk_int_fast16_t ; pub type duk_small_uint_fast_t = duk_uint_fast16_t ; pub type duk_bool_t = duk_small_uint_t ; pub type duk_idx_t = duk_int_t ; pub type duk_uidx_t = duk_uint_t ; pub type duk_uarridx_t = duk_uint_t ; pub type duk_ret_t = duk_small_int_t ; pub type duk_errcode_t = duk_int_t ; pub type duk_codepoint_t = duk_int_t ; pub type duk_ucodepoint_t = duk_uint_t ; pub type duk_float_t = f32 ; pub type duk_double_t = f64 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct duk_hthread { _unused : [ u8 ; 0 ] , } pub type duk_context = duk_hthread ; pub type duk_c_function = :: std :: option :: Option < unsafe extern "C" fn ( ctx : * mut duk_context ) -> duk_ret_t > ; pub type duk_alloc_function = :: std :: option :: Option < unsafe extern "C" fn ( udata : * mut :: std :: os :: raw :: c_void , size : duk_size_t ) -> * mut :: std :: os :: raw :: c_void > ; pub type duk_realloc_function = :: std :: option :: Option < unsafe extern "C" fn ( udata : * mut :: std :: os :: raw :: c_void , ptr : * mut :: std :: os :: raw :: c_void , size : duk_size_t ) -> * mut :: std :: os :: raw :: c_void > ; pub type duk_free_function = :: std :: option :: Option < unsafe extern "C" fn ( udata : * mut :: std :: os :: raw :: c_void , ptr : * mut :: std :: os :: raw :: c_void ) > ; pub type duk_fatal_function = :: std :: option :: Option < unsafe extern "C" fn ( udata : * mut :: std :: os :: raw :: c_void , msg : * const :: std :: os :: raw :: c_char ) > ; pub type duk_decode_char_function = :: std :: option :: Option < unsafe extern "C" fn ( udata : * mut :: std :: os :: raw :: c_void , codepoint : duk_codepoint_t ) > ; pub type duk_map_char_function = :: std :: option :: Option < unsafe extern "C" fn ( udata : * mut :: std :: os :: raw :: c_void , codepoint : duk_codepoint_t ) -> duk_codepoint_t > ; pub type duk_safe_call_function = :: std :: option :: Option < unsafe extern "C" fn ( ctx : * mut duk_context , udata : * mut :: std :: os :: raw :: c_void ) -> duk_ret_t > ; pub type duk_debug_read_function = :: std :: option :: Option < unsafe extern "C" fn ( udata : * mut :: std :: os :: raw :: c_void , buffer : * mut :: std :: os :: raw :: c_char , length : duk_size_t ) -> duk_size_t > ; pub type duk_debug_write_function = :: std :: option :: Option < unsafe extern "C" fn ( udata : * mut :: std :: os :: raw :: c_void , buffer : * const :: std :: os :: raw :: c_char , length : duk_size_t ) -> duk_size_t > ; pub type duk_debug_peek_function = :: std :: option :: Option < unsafe extern "C" fn ( udata : * mut :: std :: os :: raw :: c_void ) -> duk_size_t > ; pub type duk_debug_read_flush_function = :: std :: option :: Option < unsafe extern "C" fn ( udata : * mut :: std :: os :: raw :: c_void ) > ; pub type duk_debug_write_flush_function = :: std :: option :: Option < unsafe extern "C" fn ( udata : * mut :: std :: os :: raw :: c_void ) > ; pub type duk_debug_request_function = :: std :: option :: Option < unsafe extern "C" fn ( ctx : * mut duk_context , udata : * mut :: std :: os :: raw :: c_void , nvalues : duk_idx_t ) -> duk_idx_t > ; pub type duk_debug_detached_function = :: std :: option :: Option < unsafe extern "C" fn ( ctx : * mut duk_context , udata : * mut :: std :: os :: raw :: c_void ) > ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct duk_thread_state { pub data : [ :: std :: os :: raw :: c_char ; 128usize ] , } # [ test ] fn bindgen_test_layout_duk_thread_state ( ) { assert_eq ! ( :: std :: mem :: size_of :: < duk_thread_state > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( duk_thread_state ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < duk_thread_state > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( duk_thread_state ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < duk_thread_state > ( ) ) ) . data as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( duk_thread_state ) , "::" , stringify ! ( data ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct duk_memory_functions { pub alloc_func : duk_alloc_function , pub realloc_func : duk_realloc_function , pub free_func : duk_free_function , pub udata : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout_duk_memory_functions ( ) { assert_eq ! ( :: std :: mem :: size_of :: < duk_memory_functions > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( duk_memory_functions ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < duk_memory_functions > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( duk_memory_functions ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < duk_memory_functions > ( ) ) ) . alloc_func as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( duk_memory_functions ) , "::" , stringify ! ( alloc_func ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < duk_memory_functions > ( ) ) ) . realloc_func as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( duk_memory_functions ) , "::" , stringify ! ( realloc_func ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < duk_memory_functions > ( ) ) ) . free_func as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( duk_memory_functions ) , "::" , stringify ! ( free_func ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < duk_memory_functions > ( ) ) ) . udata as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( duk_memory_functions ) , "::" , stringify ! ( udata ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct duk_function_list_entry { pub key : * const :: std :: os :: raw :: c_char , pub value : duk_c_function , pub nargs : duk_idx_t , } # [ test ] fn bindgen_test_layout_duk_function_list_entry ( ) { assert_eq ! ( :: std :: mem :: size_of :: < duk_function_list_entry > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( duk_function_list_entry ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < duk_function_list_entry > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( duk_function_list_entry ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < duk_function_list_entry > ( ) ) ) . key as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( duk_function_list_entry ) , "::" , stringify ! ( key ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < duk_function_list_entry > ( ) ) ) . value as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( duk_function_list_entry ) , "::" , stringify ! ( value ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < duk_function_list_entry > ( ) ) ) . nargs as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( duk_function_list_entry ) , "::" , stringify ! ( nargs ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct duk_number_list_entry { pub key : * const :: std :: os :: raw :: c_char , pub value : duk_double_t , } # [ test ] fn bindgen_test_layout_duk_number_list_entry ( ) { assert_eq ! ( :: std :: mem :: size_of :: < duk_number_list_entry > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( duk_number_list_entry ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < duk_number_list_entry > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( duk_number_list_entry ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < duk_number_list_entry > ( ) ) ) . key as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( duk_number_list_entry ) , "::" , stringify ! ( key ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < duk_number_list_entry > ( ) ) ) . value as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( duk_number_list_entry ) , "::" , stringify ! ( value ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct duk_time_components { pub year : duk_double_t , pub month : duk_double_t , pub day : duk_double_t , pub hours : duk_double_t , pub minutes : duk_double_t , pub seconds : duk_double_t , pub milliseconds : duk_double_t , pub weekday : duk_double_t , } # [ test ] fn bindgen_test_layout_duk_time_components ( ) { assert_eq ! ( :: std :: mem :: size_of :: < duk_time_components > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( duk_time_components ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < duk_time_components > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( duk_time_components ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < duk_time_components > ( ) ) ) . year as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( duk_time_components ) , "::" , stringify ! ( year ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < duk_time_components > ( ) ) ) . month as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( duk_time_components ) , "::" , stringify ! ( month ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < duk_time_components > ( ) ) ) . day as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( duk_time_components ) , "::" , stringify ! ( day ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < duk_time_components > ( ) ) ) . hours as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( duk_time_components ) , "::" , stringify ! ( hours ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < duk_time_components > ( ) ) ) . minutes as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( duk_time_components ) , "::" , stringify ! ( minutes ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < duk_time_components > ( ) ) ) . seconds as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( duk_time_components ) , "::" , stringify ! ( seconds ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < duk_time_components > ( ) ) ) . milliseconds as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( duk_time_components ) , "::" , stringify ! ( milliseconds ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < duk_time_components > ( ) ) ) . weekday as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( duk_time_components ) , "::" , stringify ! ( weekday ) ) ) ; } extern "C" { pub fn duk_create_heap ( alloc_func : duk_alloc_function , realloc_func : duk_realloc_function , free_func : duk_free_function , heap_udata : * mut :: std :: os :: raw :: c_void , fatal_handler : duk_fatal_function ) -> * mut duk_context ; } extern "C" { pub fn duk_destroy_heap ( ctx : * mut duk_context ) ; } extern "C" { pub fn duk_suspend ( ctx : * mut duk_context , state : * mut duk_thread_state ) ; } extern "C" { pub fn duk_resume ( ctx : * mut duk_context , state : * const duk_thread_state ) ; } extern "C" { pub fn duk_alloc_raw ( ctx : * mut duk_context , size : duk_size_t ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn duk_free_raw ( ctx : * mut duk_context , ptr : * mut :: std :: os :: raw :: c_void ) ; } extern "C" { pub fn duk_realloc_raw ( ctx : * mut duk_context , ptr : * mut :: std :: os :: raw :: c_void , size : duk_size_t ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn duk_alloc ( ctx : * mut duk_context , size : duk_size_t ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn duk_free ( ctx : * mut duk_context , ptr : * mut :: std :: os :: raw :: c_void ) ; } extern "C" { pub fn duk_realloc ( ctx : * mut duk_context , ptr : * mut :: std :: os :: raw :: c_void , size : duk_size_t ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn duk_get_memory_functions ( ctx : * mut duk_context , out_funcs : * mut duk_memory_functions ) ; } extern "C" { pub fn duk_gc ( ctx : * mut duk_context , flags : duk_uint_t ) ; } extern "C" { pub fn duk_throw_raw ( ctx : * mut duk_context ) ; } extern "C" { pub fn duk_fatal_raw ( ctx : * mut duk_context , err_msg : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn duk_error_raw ( ctx : * mut duk_context , err_code : duk_errcode_t , filename : * const :: std :: os :: raw :: c_char , line : duk_int_t , fmt : * const :: std :: os :: raw :: c_char , ... ) ; } extern "C" { pub fn duk_error_va_raw ( ctx : * mut duk_context , err_code : duk_errcode_t , filename : * const :: std :: os :: raw :: c_char , line : duk_int_t , fmt : * const :: std :: os :: raw :: c_char , ap : * mut __va_list_tag ) ; } extern "C" { pub fn duk_is_strict_call ( ctx : * mut duk_context ) -> duk_bool_t ; } extern "C" { pub fn duk_is_constructor_call ( ctx : * mut duk_context ) -> duk_bool_t ; } extern "C" { pub fn duk_normalize_index ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_idx_t ; } extern "C" { pub fn duk_require_normalize_index ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_idx_t ; } extern "C" { pub fn duk_is_valid_index ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_require_valid_index ( ctx : * mut duk_context , idx : duk_idx_t ) ; } extern "C" { pub fn duk_get_top ( ctx : * mut duk_context ) -> duk_idx_t ; } extern "C" { pub fn duk_set_top ( ctx : * mut duk_context , idx : duk_idx_t ) ; } extern "C" { pub fn duk_get_top_index ( ctx : * mut duk_context ) -> duk_idx_t ; } extern "C" { pub fn duk_require_top_index ( ctx : * mut duk_context ) -> duk_idx_t ; } extern "C" { pub fn duk_check_stack ( ctx : * mut duk_context , extra : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_require_stack ( ctx : * mut duk_context , extra : duk_idx_t ) ; } extern "C" { pub fn duk_check_stack_top ( ctx : * mut duk_context , top : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_require_stack_top ( ctx : * mut duk_context , top : duk_idx_t ) ; } extern "C" { pub fn duk_swap ( ctx : * mut duk_context , idx1 : duk_idx_t , idx2 : duk_idx_t ) ; } extern "C" { pub fn duk_swap_top ( ctx : * mut duk_context , idx : duk_idx_t ) ; } extern "C" { pub fn duk_dup ( ctx : * mut duk_context , from_idx : duk_idx_t ) ; } extern "C" { pub fn duk_dup_top ( ctx : * mut duk_context ) ; } extern "C" { pub fn duk_insert ( ctx : * mut duk_context , to_idx : duk_idx_t ) ; } extern "C" { pub fn duk_replace ( ctx : * mut duk_context , to_idx : duk_idx_t ) ; } extern "C" { pub fn duk_copy ( ctx : * mut duk_context , from_idx : duk_idx_t , to_idx : duk_idx_t ) ; } extern "C" { pub fn duk_remove ( ctx : * mut duk_context , idx : duk_idx_t ) ; } extern "C" { pub fn duk_xcopymove_raw ( to_ctx : * mut duk_context , from_ctx : * mut duk_context , count : duk_idx_t , is_copy : duk_bool_t ) ; } extern "C" { pub fn duk_push_undefined ( ctx : * mut duk_context ) ; } extern "C" { pub fn duk_push_null ( ctx : * mut duk_context ) ; } extern "C" { pub fn duk_push_boolean ( ctx : * mut duk_context , val : duk_bool_t ) ; } extern "C" { pub fn duk_push_true ( ctx : * mut duk_context ) ; } extern "C" { pub fn duk_push_false ( ctx : * mut duk_context ) ; } extern "C" { pub fn duk_push_number ( ctx : * mut duk_context , val : duk_double_t ) ; } extern "C" { pub fn duk_push_nan ( ctx : * mut duk_context ) ; } extern "C" { pub fn duk_push_int ( ctx : * mut duk_context , val : duk_int_t ) ; } extern "C" { pub fn duk_push_uint ( ctx : * mut duk_context , val : duk_uint_t ) ; } extern "C" { pub fn duk_push_string ( ctx : * mut duk_context , str : * const :: std :: os :: raw :: c_char ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn duk_push_lstring ( ctx : * mut duk_context , str : * const :: std :: os :: raw :: c_char , len : duk_size_t ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn duk_push_pointer ( ctx : * mut duk_context , p : * mut :: std :: os :: raw :: c_void ) ; } extern "C" { pub fn duk_push_sprintf ( ctx : * mut duk_context , fmt : * const :: std :: os :: raw :: c_char , ... ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn duk_push_vsprintf ( ctx : * mut duk_context , fmt : * const :: std :: os :: raw :: c_char , ap : * mut __va_list_tag ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn duk_push_literal_raw ( ctx : * mut duk_context , str : * const :: std :: os :: raw :: c_char , len : duk_size_t ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn duk_push_this ( ctx : * mut duk_context ) ; } extern "C" { pub fn duk_push_new_target ( ctx : * mut duk_context ) ; } extern "C" { pub fn duk_push_current_function ( ctx : * mut duk_context ) ; } extern "C" { pub fn duk_push_current_thread ( ctx : * mut duk_context ) ; } extern "C" { pub fn duk_push_global_object ( ctx : * mut duk_context ) ; } extern "C" { pub fn duk_push_heap_stash ( ctx : * mut duk_context ) ; } extern "C" { pub fn duk_push_global_stash ( ctx : * mut duk_context ) ; } extern "C" { pub fn duk_push_thread_stash ( ctx : * mut duk_context , target_ctx : * mut duk_context ) ; } extern "C" { pub fn duk_push_object ( ctx : * mut duk_context ) -> duk_idx_t ; } extern "C" { pub fn duk_push_bare_object ( ctx : * mut duk_context ) -> duk_idx_t ; } extern "C" { pub fn duk_push_array ( ctx : * mut duk_context ) -> duk_idx_t ; } extern "C" { pub fn duk_push_c_function ( ctx : * mut duk_context , func : duk_c_function , nargs : duk_idx_t ) -> duk_idx_t ; } extern "C" { pub fn duk_push_c_lightfunc ( ctx : * mut duk_context , func : duk_c_function , nargs : duk_idx_t , length : duk_idx_t , magic : duk_int_t ) -> duk_idx_t ; } extern "C" { pub fn duk_push_thread_raw ( ctx : * mut duk_context , flags : duk_uint_t ) -> duk_idx_t ; } extern "C" { pub fn duk_push_proxy ( ctx : * mut duk_context , proxy_flags : duk_uint_t ) -> duk_idx_t ; } extern "C" { pub fn duk_push_error_object_raw ( ctx : * mut duk_context , err_code : duk_errcode_t , filename : * const :: std :: os :: raw :: c_char , line : duk_int_t , fmt : * const :: std :: os :: raw :: c_char , ... ) -> duk_idx_t ; } extern "C" { pub fn duk_push_error_object_va_raw ( ctx : * mut duk_context , err_code : duk_errcode_t , filename : * const :: std :: os :: raw :: c_char , line : duk_int_t , fmt : * const :: std :: os :: raw :: c_char , ap : * mut __va_list_tag ) -> duk_idx_t ; } extern "C" { pub fn duk_push_buffer_raw ( ctx : * mut duk_context , size : duk_size_t , flags : duk_small_uint_t ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn duk_push_buffer_object ( ctx : * mut duk_context , idx_buffer : duk_idx_t , byte_offset : duk_size_t , byte_length : duk_size_t , flags : duk_uint_t ) ; } extern "C" { pub fn duk_push_heapptr ( ctx : * mut duk_context , ptr : * mut :: std :: os :: raw :: c_void ) -> duk_idx_t ; } extern "C" { pub fn duk_pop ( ctx : * mut duk_context ) ; } extern "C" { pub fn duk_pop_n ( ctx : * mut duk_context , count : duk_idx_t ) ; } extern "C" { pub fn duk_pop_2 ( ctx : * mut duk_context ) ; } extern "C" { pub fn duk_pop_3 ( ctx : * mut duk_context ) ; } extern "C" { pub fn duk_get_type ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_int_t ; } extern "C" { pub fn duk_check_type ( ctx : * mut duk_context , idx : duk_idx_t , type_ : duk_int_t ) -> duk_bool_t ; } extern "C" { pub fn duk_get_type_mask ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_uint_t ; } extern "C" { pub fn duk_check_type_mask ( ctx : * mut duk_context , idx : duk_idx_t , mask : duk_uint_t ) -> duk_bool_t ; } extern "C" { pub fn duk_is_undefined ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_is_null ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_is_boolean ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_is_number ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_is_nan ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_is_string ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_is_object ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_is_buffer ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_is_buffer_data ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_is_pointer ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_is_lightfunc ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_is_symbol ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_is_array ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_is_function ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_is_c_function ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_is_ecmascript_function ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_is_bound_function ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_is_thread ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_is_constructable ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_is_dynamic_buffer ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_is_fixed_buffer ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_is_external_buffer ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_get_error_code ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_errcode_t ; } extern "C" { pub fn duk_get_boolean ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_get_number ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_double_t ; } extern "C" { pub fn duk_get_int ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_int_t ; } extern "C" { pub fn duk_get_uint ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_uint_t ; } extern "C" { pub fn duk_get_string ( ctx : * mut duk_context , idx : duk_idx_t ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn duk_get_lstring ( ctx : * mut duk_context , idx : duk_idx_t , out_len : * mut duk_size_t ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn duk_get_buffer ( ctx : * mut duk_context , idx : duk_idx_t , out_size : * mut duk_size_t ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn duk_get_buffer_data ( ctx : * mut duk_context , idx : duk_idx_t , out_size : * mut duk_size_t ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn duk_get_pointer ( ctx : * mut duk_context , idx : duk_idx_t ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn duk_get_c_function ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_c_function ; } extern "C" { pub fn duk_get_context ( ctx : * mut duk_context , idx : duk_idx_t ) -> * mut duk_context ; } extern "C" { pub fn duk_get_heapptr ( ctx : * mut duk_context , idx : duk_idx_t ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn duk_get_boolean_default ( ctx : * mut duk_context , idx : duk_idx_t , def_value : duk_bool_t ) -> duk_bool_t ; } extern "C" { pub fn duk_get_number_default ( ctx : * mut duk_context , idx : duk_idx_t , def_value : duk_double_t ) -> duk_double_t ; } extern "C" { pub fn duk_get_int_default ( ctx : * mut duk_context , idx : duk_idx_t , def_value : duk_int_t ) -> duk_int_t ; } extern "C" { pub fn duk_get_uint_default ( ctx : * mut duk_context , idx : duk_idx_t , def_value : duk_uint_t ) -> duk_uint_t ; } extern "C" { pub fn duk_get_string_default ( ctx : * mut duk_context , idx : duk_idx_t , def_value : * const :: std :: os :: raw :: c_char ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn duk_get_lstring_default ( ctx : * mut duk_context , idx : duk_idx_t , out_len : * mut duk_size_t , def_ptr : * const :: std :: os :: raw :: c_char , def_len : duk_size_t ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn duk_get_buffer_default ( ctx : * mut duk_context , idx : duk_idx_t , out_size : * mut duk_size_t , def_ptr : * mut :: std :: os :: raw :: c_void , def_len : duk_size_t ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn duk_get_buffer_data_default ( ctx : * mut duk_context , idx : duk_idx_t , out_size : * mut duk_size_t , def_ptr : * mut :: std :: os :: raw :: c_void , def_len : duk_size_t ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn duk_get_pointer_default ( ctx : * mut duk_context , idx : duk_idx_t , def_value : * mut :: std :: os :: raw :: c_void ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn duk_get_c_function_default ( ctx : * mut duk_context , idx : duk_idx_t , def_value : duk_c_function ) -> duk_c_function ; } extern "C" { pub fn duk_get_context_default ( ctx : * mut duk_context , idx : duk_idx_t , def_value : * mut duk_context ) -> * mut duk_context ; } extern "C" { pub fn duk_get_heapptr_default ( ctx : * mut duk_context , idx : duk_idx_t , def_value : * mut :: std :: os :: raw :: c_void ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn duk_opt_boolean ( ctx : * mut duk_context , idx : duk_idx_t , def_value : duk_bool_t ) -> duk_bool_t ; } extern "C" { pub fn duk_opt_number ( ctx : * mut duk_context , idx : duk_idx_t , def_value : duk_double_t ) -> duk_double_t ; } extern "C" { pub fn duk_opt_int ( ctx : * mut duk_context , idx : duk_idx_t , def_value : duk_int_t ) -> duk_int_t ; } extern "C" { pub fn duk_opt_uint ( ctx : * mut duk_context , idx : duk_idx_t , def_value : duk_uint_t ) -> duk_uint_t ; } extern "C" { pub fn duk_opt_string ( ctx : * mut duk_context , idx : duk_idx_t , def_ptr : * const :: std :: os :: raw :: c_char ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn duk_opt_lstring ( ctx : * mut duk_context , idx : duk_idx_t , out_len : * mut duk_size_t , def_ptr : * const :: std :: os :: raw :: c_char , def_len : duk_size_t ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn duk_opt_buffer ( ctx : * mut duk_context , idx : duk_idx_t , out_size : * mut duk_size_t , def_ptr : * mut :: std :: os :: raw :: c_void , def_size : duk_size_t ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn duk_opt_buffer_data ( ctx : * mut duk_context , idx : duk_idx_t , out_size : * mut duk_size_t , def_ptr : * mut :: std :: os :: raw :: c_void , def_size : duk_size_t ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn duk_opt_pointer ( ctx : * mut duk_context , idx : duk_idx_t , def_value : * mut :: std :: os :: raw :: c_void ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn duk_opt_c_function ( ctx : * mut duk_context , idx : duk_idx_t , def_value : duk_c_function ) -> duk_c_function ; } extern "C" { pub fn duk_opt_context ( ctx : * mut duk_context , idx : duk_idx_t , def_value : * mut duk_context ) -> * mut duk_context ; } extern "C" { pub fn duk_opt_heapptr ( ctx : * mut duk_context , idx : duk_idx_t , def_value : * mut :: std :: os :: raw :: c_void ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn duk_require_undefined ( ctx : * mut duk_context , idx : duk_idx_t ) ; } extern "C" { pub fn duk_require_null ( ctx : * mut duk_context , idx : duk_idx_t ) ; } extern "C" { pub fn duk_require_boolean ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_require_number ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_double_t ; } extern "C" { pub fn duk_require_int ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_int_t ; } extern "C" { pub fn duk_require_uint ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_uint_t ; } extern "C" { pub fn duk_require_string ( ctx : * mut duk_context , idx : duk_idx_t ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn duk_require_lstring ( ctx : * mut duk_context , idx : duk_idx_t , out_len : * mut duk_size_t ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn duk_require_object ( ctx : * mut duk_context , idx : duk_idx_t ) ; } extern "C" { pub fn duk_require_buffer ( ctx : * mut duk_context , idx : duk_idx_t , out_size : * mut duk_size_t ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn duk_require_buffer_data ( ctx : * mut duk_context , idx : duk_idx_t , out_size : * mut duk_size_t ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn duk_require_pointer ( ctx : * mut duk_context , idx : duk_idx_t ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn duk_require_c_function ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_c_function ; } extern "C" { pub fn duk_require_context ( ctx : * mut duk_context , idx : duk_idx_t ) -> * mut duk_context ; } extern "C" { pub fn duk_require_function ( ctx : * mut duk_context , idx : duk_idx_t ) ; } extern "C" { pub fn duk_require_heapptr ( ctx : * mut duk_context , idx : duk_idx_t ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn duk_to_undefined ( ctx : * mut duk_context , idx : duk_idx_t ) ; } extern "C" { pub fn duk_to_null ( ctx : * mut duk_context , idx : duk_idx_t ) ; } extern "C" { pub fn duk_to_boolean ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_to_number ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_double_t ; } extern "C" { pub fn duk_to_int ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_int_t ; } extern "C" { pub fn duk_to_uint ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_uint_t ; } extern "C" { pub fn duk_to_int32 ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_int32_t ; } extern "C" { pub fn duk_to_uint32 ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_uint32_t ; } extern "C" { pub fn duk_to_uint16 ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_uint16_t ; } extern "C" { pub fn duk_to_string ( ctx : * mut duk_context , idx : duk_idx_t ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn duk_to_lstring ( ctx : * mut duk_context , idx : duk_idx_t , out_len : * mut duk_size_t ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn duk_to_buffer_raw ( ctx : * mut duk_context , idx : duk_idx_t , out_size : * mut duk_size_t , flags : duk_uint_t ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn duk_to_pointer ( ctx : * mut duk_context , idx : duk_idx_t ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn duk_to_object ( ctx : * mut duk_context , idx : duk_idx_t ) ; } extern "C" { pub fn duk_to_primitive ( ctx : * mut duk_context , idx : duk_idx_t , hint : duk_int_t ) ; } extern "C" { pub fn duk_safe_to_lstring ( ctx : * mut duk_context , idx : duk_idx_t , out_len : * mut duk_size_t ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn duk_get_length ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_size_t ; } extern "C" { pub fn duk_set_length ( ctx : * mut duk_context , idx : duk_idx_t , len : duk_size_t ) ; } extern "C" { pub fn duk_base64_encode ( ctx : * mut duk_context , idx : duk_idx_t ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn duk_base64_decode ( ctx : * mut duk_context , idx : duk_idx_t ) ; } extern "C" { pub fn duk_hex_encode ( ctx : * mut duk_context , idx : duk_idx_t ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn duk_hex_decode ( ctx : * mut duk_context , idx : duk_idx_t ) ; } extern "C" { pub fn duk_json_encode ( ctx : * mut duk_context , idx : duk_idx_t ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn duk_json_decode ( ctx : * mut duk_context , idx : duk_idx_t ) ; } extern "C" { pub fn duk_buffer_to_string ( ctx : * mut duk_context , idx : duk_idx_t ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn duk_resize_buffer ( ctx : * mut duk_context , idx : duk_idx_t , new_size : duk_size_t ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn duk_steal_buffer ( ctx : * mut duk_context , idx : duk_idx_t , out_size : * mut duk_size_t ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn duk_config_buffer ( ctx : * mut duk_context , idx : duk_idx_t , ptr : * mut :: std :: os :: raw :: c_void , len : duk_size_t ) ; } extern "C" { pub fn duk_get_prop ( ctx : * mut duk_context , obj_idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_get_prop_string ( ctx : * mut duk_context , obj_idx : duk_idx_t , key : * const :: std :: os :: raw :: c_char ) -> duk_bool_t ; } extern "C" { pub fn duk_get_prop_lstring ( ctx : * mut duk_context , obj_idx : duk_idx_t , key : * const :: std :: os :: raw :: c_char , key_len : duk_size_t ) -> duk_bool_t ; } extern "C" { pub fn duk_get_prop_literal_raw ( ctx : * mut duk_context , obj_idx : duk_idx_t , key : * const :: std :: os :: raw :: c_char , key_len : duk_size_t ) -> duk_bool_t ; } extern "C" { pub fn duk_get_prop_index ( ctx : * mut duk_context , obj_idx : duk_idx_t , arr_idx : duk_uarridx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_get_prop_heapptr ( ctx : * mut duk_context , obj_idx : duk_idx_t , ptr : * mut :: std :: os :: raw :: c_void ) -> duk_bool_t ; } extern "C" { pub fn duk_put_prop ( ctx : * mut duk_context , obj_idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_put_prop_string ( ctx : * mut duk_context , obj_idx : duk_idx_t , key : * const :: std :: os :: raw :: c_char ) -> duk_bool_t ; } extern "C" { pub fn duk_put_prop_lstring ( ctx : * mut duk_context , obj_idx : duk_idx_t , key : * const :: std :: os :: raw :: c_char , key_len : duk_size_t ) -> duk_bool_t ; } extern "C" { pub fn duk_put_prop_literal_raw ( ctx : * mut duk_context , obj_idx : duk_idx_t , key : * const :: std :: os :: raw :: c_char , key_len : duk_size_t ) -> duk_bool_t ; } extern "C" { pub fn duk_put_prop_index ( ctx : * mut duk_context , obj_idx : duk_idx_t , arr_idx : duk_uarridx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_put_prop_heapptr ( ctx : * mut duk_context , obj_idx : duk_idx_t , ptr : * mut :: std :: os :: raw :: c_void ) -> duk_bool_t ; } extern "C" { pub fn duk_del_prop ( ctx : * mut duk_context , obj_idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_del_prop_string ( ctx : * mut duk_context , obj_idx : duk_idx_t , key : * const :: std :: os :: raw :: c_char ) -> duk_bool_t ; } extern "C" { pub fn duk_del_prop_lstring ( ctx : * mut duk_context , obj_idx : duk_idx_t , key : * const :: std :: os :: raw :: c_char , key_len : duk_size_t ) -> duk_bool_t ; } extern "C" { pub fn duk_del_prop_literal_raw ( ctx : * mut duk_context , obj_idx : duk_idx_t , key : * const :: std :: os :: raw :: c_char , key_len : duk_size_t ) -> duk_bool_t ; } extern "C" { pub fn duk_del_prop_index ( ctx : * mut duk_context , obj_idx : duk_idx_t , arr_idx : duk_uarridx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_del_prop_heapptr ( ctx : * mut duk_context , obj_idx : duk_idx_t , ptr : * mut :: std :: os :: raw :: c_void ) -> duk_bool_t ; } extern "C" { pub fn duk_has_prop ( ctx : * mut duk_context , obj_idx : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_has_prop_string ( ctx : * mut duk_context , obj_idx : duk_idx_t , key : * const :: std :: os :: raw :: c_char ) -> duk_bool_t ; } extern "C" { pub fn duk_has_prop_lstring ( ctx : * mut duk_context , obj_idx : duk_idx_t , key : * const :: std :: os :: raw :: c_char , key_len : duk_size_t ) -> duk_bool_t ; } extern "C" { pub fn duk_has_prop_literal_raw ( ctx : * mut duk_context , obj_idx : duk_idx_t , key : * const :: std :: os :: raw :: c_char , key_len : duk_size_t ) -> duk_bool_t ; } extern "C" { pub fn duk_has_prop_index ( ctx : * mut duk_context , obj_idx : duk_idx_t , arr_idx : duk_uarridx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_has_prop_heapptr ( ctx : * mut duk_context , obj_idx : duk_idx_t , ptr : * mut :: std :: os :: raw :: c_void ) -> duk_bool_t ; } extern "C" { pub fn duk_get_prop_desc ( ctx : * mut duk_context , obj_idx : duk_idx_t , flags : duk_uint_t ) ; } extern "C" { pub fn duk_def_prop ( ctx : * mut duk_context , obj_idx : duk_idx_t , flags : duk_uint_t ) ; } extern "C" { pub fn duk_get_global_string ( ctx : * mut duk_context , key : * const :: std :: os :: raw :: c_char ) -> duk_bool_t ; } extern "C" { pub fn duk_get_global_lstring ( ctx : * mut duk_context , key : * const :: std :: os :: raw :: c_char , key_len : duk_size_t ) -> duk_bool_t ; } extern "C" { pub fn duk_get_global_literal_raw ( ctx : * mut duk_context , key : * const :: std :: os :: raw :: c_char , key_len : duk_size_t ) -> duk_bool_t ; } extern "C" { pub fn duk_get_global_heapptr ( ctx : * mut duk_context , ptr : * mut :: std :: os :: raw :: c_void ) -> duk_bool_t ; } extern "C" { pub fn duk_put_global_string ( ctx : * mut duk_context , key : * const :: std :: os :: raw :: c_char ) -> duk_bool_t ; } extern "C" { pub fn duk_put_global_lstring ( ctx : * mut duk_context , key : * const :: std :: os :: raw :: c_char , key_len : duk_size_t ) -> duk_bool_t ; } extern "C" { pub fn duk_put_global_literal_raw ( ctx : * mut duk_context , key : * const :: std :: os :: raw :: c_char , key_len : duk_size_t ) -> duk_bool_t ; } extern "C" { pub fn duk_put_global_heapptr ( ctx : * mut duk_context , ptr : * mut :: std :: os :: raw :: c_void ) -> duk_bool_t ; } extern "C" { pub fn duk_inspect_value ( ctx : * mut duk_context , idx : duk_idx_t ) ; } extern "C" { pub fn duk_inspect_callstack_entry ( ctx : * mut duk_context , level : duk_int_t ) ; } extern "C" { pub fn duk_get_prototype ( ctx : * mut duk_context , idx : duk_idx_t ) ; } extern "C" { pub fn duk_set_prototype ( ctx : * mut duk_context , idx : duk_idx_t ) ; } extern "C" { pub fn duk_get_finalizer ( ctx : * mut duk_context , idx : duk_idx_t ) ; } extern "C" { pub fn duk_set_finalizer ( ctx : * mut duk_context , idx : duk_idx_t ) ; } extern "C" { pub fn duk_set_global_object ( ctx : * mut duk_context ) ; } extern "C" { pub fn duk_get_magic ( ctx : * mut duk_context , idx : duk_idx_t ) -> duk_int_t ; } extern "C" { pub fn duk_set_magic ( ctx : * mut duk_context , idx : duk_idx_t , magic : duk_int_t ) ; } extern "C" { pub fn duk_get_current_magic ( ctx : * mut duk_context ) -> duk_int_t ; } extern "C" { pub fn duk_put_function_list ( ctx : * mut duk_context , obj_idx : duk_idx_t , funcs : * const duk_function_list_entry ) ; } extern "C" { pub fn duk_put_number_list ( ctx : * mut duk_context , obj_idx : duk_idx_t , numbers : * const duk_number_list_entry ) ; } extern "C" { pub fn duk_compact ( ctx : * mut duk_context , obj_idx : duk_idx_t ) ; } extern "C" { pub fn duk_enum ( ctx : * mut duk_context , obj_idx : duk_idx_t , enum_flags : duk_uint_t ) ; } extern "C" { pub fn duk_next ( ctx : * mut duk_context , enum_idx : duk_idx_t , get_value : duk_bool_t ) -> duk_bool_t ; } extern "C" { pub fn duk_seal ( ctx : * mut duk_context , obj_idx : duk_idx_t ) ; } extern "C" { pub fn duk_freeze ( ctx : * mut duk_context , obj_idx : duk_idx_t ) ; } extern "C" { pub fn duk_concat ( ctx : * mut duk_context , count : duk_idx_t ) ; } extern "C" { pub fn duk_join ( ctx : * mut duk_context , count : duk_idx_t ) ; } extern "C" { pub fn duk_decode_string ( ctx : * mut duk_context , idx : duk_idx_t , callback : duk_decode_char_function , udata : * mut :: std :: os :: raw :: c_void ) ; } extern "C" { pub fn duk_map_string ( ctx : * mut duk_context , idx : duk_idx_t , callback : duk_map_char_function , udata : * mut :: std :: os :: raw :: c_void ) ; } extern "C" { pub fn duk_substring ( ctx : * mut duk_context , idx : duk_idx_t , start_char_offset : duk_size_t , end_char_offset : duk_size_t ) ; } extern "C" { pub fn duk_trim ( ctx : * mut duk_context , idx : duk_idx_t ) ; } extern "C" { pub fn duk_char_code_at ( ctx : * mut duk_context , idx : duk_idx_t , char_offset : duk_size_t ) -> duk_codepoint_t ; } extern "C" { pub fn duk_equals ( ctx : * mut duk_context , idx1 : duk_idx_t , idx2 : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_strict_equals ( ctx : * mut duk_context , idx1 : duk_idx_t , idx2 : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_samevalue ( ctx : * mut duk_context , idx1 : duk_idx_t , idx2 : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_instanceof ( ctx : * mut duk_context , idx1 : duk_idx_t , idx2 : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_random ( ctx : * mut duk_context ) -> duk_double_t ; } extern "C" { pub fn duk_call ( ctx : * mut duk_context , nargs : duk_idx_t ) ; } extern "C" { pub fn duk_call_method ( ctx : * mut duk_context , nargs : duk_idx_t ) ; } extern "C" { pub fn duk_call_prop ( ctx : * mut duk_context , obj_idx : duk_idx_t , nargs : duk_idx_t ) ; } extern "C" { pub fn duk_pcall ( ctx : * mut duk_context , nargs : duk_idx_t ) -> duk_int_t ; } extern "C" { pub fn duk_pcall_method ( ctx : * mut duk_context , nargs : duk_idx_t ) -> duk_int_t ; } extern "C" { pub fn duk_pcall_prop ( ctx : * mut duk_context , obj_idx : duk_idx_t , nargs : duk_idx_t ) -> duk_int_t ; } extern "C" { pub fn duk_new ( ctx : * mut duk_context , nargs : duk_idx_t ) ; } extern "C" { pub fn duk_pnew ( ctx : * mut duk_context , nargs : duk_idx_t ) -> duk_int_t ; } extern "C" { pub fn duk_safe_call ( ctx : * mut duk_context , func : duk_safe_call_function , udata : * mut :: std :: os :: raw :: c_void , nargs : duk_idx_t , nrets : duk_idx_t ) -> duk_int_t ; } extern "C" { pub fn duk_eval_raw ( ctx : * mut duk_context , src_buffer : * const :: std :: os :: raw :: c_char , src_length : duk_size_t , flags : duk_uint_t ) -> duk_int_t ; } extern "C" { pub fn duk_compile_raw ( ctx : * mut duk_context , src_buffer : * const :: std :: os :: raw :: c_char , src_length : duk_size_t , flags : duk_uint_t ) -> duk_int_t ; } extern "C" { pub fn duk_dump_function ( ctx : * mut duk_context ) ; } extern "C" { pub fn duk_load_function ( ctx : * mut duk_context ) ; } extern "C" { pub fn duk_push_context_dump ( ctx : * mut duk_context ) ; } extern "C" { pub fn duk_debugger_attach ( ctx : * mut duk_context , read_cb : duk_debug_read_function , write_cb : duk_debug_write_function , peek_cb : duk_debug_peek_function , read_flush_cb : duk_debug_read_flush_function , write_flush_cb : duk_debug_write_flush_function , request_cb : duk_debug_request_function , detached_cb : duk_debug_detached_function , udata : * mut :: std :: os :: raw :: c_void ) ; } extern "C" { pub fn duk_debugger_detach ( ctx : * mut duk_context ) ; } extern "C" { pub fn duk_debugger_cooperate ( ctx : * mut duk_context ) ; } extern "C" { pub fn duk_debugger_notify ( ctx : * mut duk_context , nvalues : duk_idx_t ) -> duk_bool_t ; } extern "C" { pub fn duk_debugger_pause ( ctx : * mut duk_context ) ; } extern "C" { pub fn duk_get_now ( ctx : * mut duk_context ) -> duk_double_t ; } extern "C" { pub fn duk_time_to_components ( ctx : * mut duk_context , timeval : duk_double_t , comp : * mut duk_time_components ) ; } extern "C" { pub fn duk_components_to_time ( ctx : * mut duk_context , comp : * mut duk_time_components ) -> duk_double_t ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __locale_data { pub _address : u8 , } pub type __builtin_va_list = [ __va_list_tag ; 1usize ] ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __va_list_tag { pub gp_offset : :: std :: os :: raw :: c_uint , pub fp_offset : :: std :: os :: raw :: c_uint , pub overflow_arg_area : * mut :: std :: os :: raw :: c_void , pub reg_save_area : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout___va_list_tag ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __va_list_tag > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( __va_list_tag ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __va_list_tag > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __va_list_tag ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __va_list_tag > ( ) ) ) . gp_offset as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( gp_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __va_list_tag > ( ) ) ) . fp_offset as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( fp_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __va_list_tag > ( ) ) ) . overflow_arg_area as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( overflow_arg_area ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __va_list_tag > ( ) ) ) . reg_save_area as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( reg_save_area ) ) ) ; }